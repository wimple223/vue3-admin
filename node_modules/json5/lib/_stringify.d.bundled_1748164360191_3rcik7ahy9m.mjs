var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/json5/lib/stringify.d.ts
var require_stringify_d = __commonJS({
  "node_modules/json5/lib/stringify.d.ts"(exports, module) {
    module.exports = stringify;
  }
});
export default require_stringify_d();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2pzb241L2xpYi9zdHJpbmdpZnkuZC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxqc29uNVxcXFxsaWJcXFxcc3RyaW5naWZ5LmQudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcanNvbjVcXFxcbGliXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9qc29uNS9saWIvc3RyaW5naWZ5LmQudHNcIjtkZWNsYXJlIHR5cGUgU3RyaW5naWZ5T3B0aW9ucyA9IHtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgYWx0ZXJzIHRoZSBiZWhhdmlvciBvZiB0aGUgc3RyaW5naWZpY2F0aW9uIHByb2Nlc3MsIG9yIGFuXG4gICAgICogYXJyYXkgb2YgU3RyaW5nIGFuZCBOdW1iZXIgb2JqZWN0cyB0aGF0IHNlcnZlIGFzIGEgYWxsb3dsaXN0IGZvclxuICAgICAqIHNlbGVjdGluZy9maWx0ZXJpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZhbHVlIG9iamVjdCB0byBiZSBpbmNsdWRlZCBpblxuICAgICAqIHRoZSBKU09ONSBzdHJpbmcuIElmIHRoaXMgdmFsdWUgaXMgbnVsbCBvciBub3QgcHJvdmlkZWQsIGFsbCBwcm9wZXJ0aWVzXG4gICAgICogb2YgdGhlIG9iamVjdCBhcmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdGluZyBKU09ONSBzdHJpbmcuXG4gICAgICovXG4gICAgcmVwbGFjZXI/OlxuICAgICAgICB8ICgodGhpczogYW55LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55KVxuICAgICAgICB8IChzdHJpbmcgfCBudW1iZXIpW11cbiAgICAgICAgfCBudWxsXG5cbiAgICAvKipcbiAgICAgKiBBIFN0cmluZyBvciBOdW1iZXIgb2JqZWN0IHRoYXQncyB1c2VkIHRvIGluc2VydCB3aGl0ZSBzcGFjZSBpbnRvIHRoZVxuICAgICAqIG91dHB1dCBKU09ONSBzdHJpbmcgZm9yIHJlYWRhYmlsaXR5IHB1cnBvc2VzLiBJZiB0aGlzIGlzIGEgTnVtYmVyLCBpdFxuICAgICAqIGluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMgdG8gdXNlIGFzIHdoaXRlIHNwYWNlOyB0aGlzXG4gICAgICogbnVtYmVyIGlzIGNhcHBlZCBhdCAxMCAoaWYgaXQgaXMgZ3JlYXRlciwgdGhlIHZhbHVlIGlzIGp1c3QgMTApLiBWYWx1ZXNcbiAgICAgKiBsZXNzIHRoYW4gMSBpbmRpY2F0ZSB0aGF0IG5vIHNwYWNlIHNob3VsZCBiZSB1c2VkLiBJZiB0aGlzIGlzIGEgU3RyaW5nLFxuICAgICAqIHRoZSBzdHJpbmcgKG9yIHRoZSBmaXJzdCAxMCBjaGFyYWN0ZXJzIG9mIHRoZSBzdHJpbmcsIGlmIGl0J3MgbG9uZ2VyIHRoYW5cbiAgICAgKiB0aGF0KSBpcyB1c2VkIGFzIHdoaXRlIHNwYWNlLiBJZiB0aGlzIHBhcmFtZXRlciBpcyBub3QgcHJvdmlkZWQgKG9yIGlzXG4gICAgICogbnVsbCksIG5vIHdoaXRlIHNwYWNlIGlzIHVzZWQuIElmIHdoaXRlIHNwYWNlIGlzIHVzZWQsIHRyYWlsaW5nIGNvbW1hc1xuICAgICAqIHdpbGwgYmUgdXNlZCBpbiBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICovXG4gICAgc3BhY2U/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsXG5cbiAgICAvKipcbiAgICAgKiBBIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIHF1b3RlIGNoYXJhY3RlciB0byB1c2Ugd2hlbiBzZXJpYWxpemluZ1xuICAgICAqIHN0cmluZ3MuXG4gICAgICovXG4gICAgcXVvdGU/OiBzdHJpbmcgfCBudWxsXG59XG5cbi8qKlxuICogQ29udmVydHMgYSBKYXZhU2NyaXB0IHZhbHVlIHRvIGEgSlNPTjUgc3RyaW5nLlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgSlNPTjUgc3RyaW5nLlxuICogQHBhcmFtIHJlcGxhY2VyIEEgZnVuY3Rpb24gdGhhdCBhbHRlcnMgdGhlIGJlaGF2aW9yIG9mIHRoZSBzdHJpbmdpZmljYXRpb25cbiAqIHByb2Nlc3MuIElmIHRoaXMgdmFsdWUgaXMgbnVsbCBvciBub3QgcHJvdmlkZWQsIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3RcbiAqIGFyZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0aW5nIEpTT041IHN0cmluZy5cbiAqIEBwYXJhbSBzcGFjZSBBIFN0cmluZyBvciBOdW1iZXIgb2JqZWN0IHRoYXQncyB1c2VkIHRvIGluc2VydCB3aGl0ZSBzcGFjZSBpbnRvXG4gKiB0aGUgb3V0cHV0IEpTT041IHN0cmluZyBmb3IgcmVhZGFiaWxpdHkgcHVycG9zZXMuIElmIHRoaXMgaXMgYSBOdW1iZXIsIGl0XG4gKiBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBzcGFjZSBjaGFyYWN0ZXJzIHRvIHVzZSBhcyB3aGl0ZSBzcGFjZTsgdGhpcyBudW1iZXJcbiAqIGlzIGNhcHBlZCBhdCAxMCAoaWYgaXQgaXMgZ3JlYXRlciwgdGhlIHZhbHVlIGlzIGp1c3QgMTApLiBWYWx1ZXMgbGVzcyB0aGFuIDFcbiAqIGluZGljYXRlIHRoYXQgbm8gc3BhY2Ugc2hvdWxkIGJlIHVzZWQuIElmIHRoaXMgaXMgYSBTdHJpbmcsIHRoZSBzdHJpbmcgKG9yXG4gKiB0aGUgZmlyc3QgMTAgY2hhcmFjdGVycyBvZiB0aGUgc3RyaW5nLCBpZiBpdCdzIGxvbmdlciB0aGFuIHRoYXQpIGlzIHVzZWQgYXNcbiAqIHdoaXRlIHNwYWNlLiBJZiB0aGlzIHBhcmFtZXRlciBpcyBub3QgcHJvdmlkZWQgKG9yIGlzIG51bGwpLCBubyB3aGl0ZSBzcGFjZVxuICogaXMgdXNlZC4gSWYgd2hpdGUgc3BhY2UgaXMgdXNlZCwgdHJhaWxpbmcgY29tbWFzIHdpbGwgYmUgdXNlZCBpbiBvYmplY3RzIGFuZFxuICogYXJyYXlzLlxuICogQHJldHVybnMgVGhlIEpTT041IHN0cmluZyBjb252ZXJ0ZWQgZnJvbSB0aGUgSmF2YVNjcmlwdCB2YWx1ZS5cbiAqL1xuZGVjbGFyZSBmdW5jdGlvbiBzdHJpbmdpZnkoXG4gICAgdmFsdWU6IGFueSxcbiAgICByZXBsYWNlcj86ICgodGhpczogYW55LCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkgPT4gYW55KSB8IG51bGwsXG4gICAgc3BhY2U/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsLFxuKTogc3RyaW5nXG5cbi8qKlxuICogQ29udmVydHMgYSBKYXZhU2NyaXB0IHZhbHVlIHRvIGEgSlNPTjUgc3RyaW5nLlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgSlNPTjUgc3RyaW5nLlxuICogQHBhcmFtIHJlcGxhY2VyIEFuIGFycmF5IG9mIFN0cmluZyBhbmQgTnVtYmVyIG9iamVjdHMgdGhhdCBzZXJ2ZSBhcyBhXG4gKiBhbGxvd2xpc3QgZm9yIHNlbGVjdGluZy9maWx0ZXJpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHZhbHVlIG9iamVjdCB0byBiZVxuICogaW5jbHVkZWQgaW4gdGhlIEpTT041IHN0cmluZy4gSWYgdGhpcyB2YWx1ZSBpcyBudWxsIG9yIG5vdCBwcm92aWRlZCwgYWxsXG4gKiBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgYXJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgSlNPTjUgc3RyaW5nLlxuICogQHBhcmFtIHNwYWNlIEEgU3RyaW5nIG9yIE51bWJlciBvYmplY3QgdGhhdCdzIHVzZWQgdG8gaW5zZXJ0IHdoaXRlIHNwYWNlIGludG9cbiAqIHRoZSBvdXRwdXQgSlNPTjUgc3RyaW5nIGZvciByZWFkYWJpbGl0eSBwdXJwb3Nlcy4gSWYgdGhpcyBpcyBhIE51bWJlciwgaXRcbiAqIGluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMgdG8gdXNlIGFzIHdoaXRlIHNwYWNlOyB0aGlzIG51bWJlclxuICogaXMgY2FwcGVkIGF0IDEwIChpZiBpdCBpcyBncmVhdGVyLCB0aGUgdmFsdWUgaXMganVzdCAxMCkuIFZhbHVlcyBsZXNzIHRoYW4gMVxuICogaW5kaWNhdGUgdGhhdCBubyBzcGFjZSBzaG91bGQgYmUgdXNlZC4gSWYgdGhpcyBpcyBhIFN0cmluZywgdGhlIHN0cmluZyAob3JcbiAqIHRoZSBmaXJzdCAxMCBjaGFyYWN0ZXJzIG9mIHRoZSBzdHJpbmcsIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhhdCkgaXMgdXNlZCBhc1xuICogd2hpdGUgc3BhY2UuIElmIHRoaXMgcGFyYW1ldGVyIGlzIG5vdCBwcm92aWRlZCAob3IgaXMgbnVsbCksIG5vIHdoaXRlIHNwYWNlXG4gKiBpcyB1c2VkLiBJZiB3aGl0ZSBzcGFjZSBpcyB1c2VkLCB0cmFpbGluZyBjb21tYXMgd2lsbCBiZSB1c2VkIGluIG9iamVjdHMgYW5kXG4gKiBhcnJheXMuXG4gKiBAcmV0dXJucyBUaGUgSlNPTjUgc3RyaW5nIGNvbnZlcnRlZCBmcm9tIHRoZSBKYXZhU2NyaXB0IHZhbHVlLlxuICovXG5kZWNsYXJlIGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICB2YWx1ZTogYW55LFxuICAgIHJlcGxhY2VyOiAoc3RyaW5nIHwgbnVtYmVyKVtdLFxuICAgIHNwYWNlPzogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCxcbik6IHN0cmluZ1xuXG4vKipcbiAqIENvbnZlcnRzIGEgSmF2YVNjcmlwdCB2YWx1ZSB0byBhIEpTT041IHN0cmluZy5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhIEpTT041IHN0cmluZy5cbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBUaGUgSlNPTjUgc3RyaW5nIGNvbnZlcnRlZCBmcm9tIHRoZSBKYXZhU2NyaXB0IHZhbHVlLlxuICovXG5kZWNsYXJlIGZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZTogYW55LCBvcHRpb25zOiBTdHJpbmdpZnlPcHRpb25zKTogc3RyaW5nXG5cbmV4cG9ydCA9IHN0cmluZ2lmeVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7O0FBQUE7QUFBQTtBQXdGQSxxQkFBUztBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
