var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/spdx-expression-parse/parse.js
var require_parse = __commonJS({
  "node_modules/spdx-expression-parse/parse.js"(exports, module) {
    module.exports = function(tokens) {
      var index = 0;
      function hasMore() {
        return index < tokens.length;
      }
      function token() {
        return hasMore() ? tokens[index] : null;
      }
      function next() {
        if (!hasMore()) {
          throw new Error();
        }
        index++;
      }
      function parseOperator(operator) {
        var t = token();
        if (t && t.type === "OPERATOR" && operator === t.string) {
          next();
          return t.string;
        }
      }
      function parseWith() {
        if (parseOperator("WITH")) {
          var t = token();
          if (t && t.type === "EXCEPTION") {
            next();
            return t.string;
          }
          throw new Error("Expected exception after `WITH`");
        }
      }
      function parseLicenseRef() {
        var begin = index;
        var string = "";
        var t = token();
        if (t.type === "DOCUMENTREF") {
          next();
          string += "DocumentRef-" + t.string + ":";
          if (!parseOperator(":")) {
            throw new Error("Expected `:` after `DocumentRef-...`");
          }
        }
        t = token();
        if (t.type === "LICENSEREF") {
          next();
          string += "LicenseRef-" + t.string;
          return { license: string };
        }
        index = begin;
      }
      function parseLicense() {
        var t = token();
        if (t && t.type === "LICENSE") {
          next();
          var node2 = { license: t.string };
          if (parseOperator("+")) {
            node2.plus = true;
          }
          var exception = parseWith();
          if (exception) {
            node2.exception = exception;
          }
          return node2;
        }
      }
      function parseParenthesizedExpression() {
        var left = parseOperator("(");
        if (!left) {
          return;
        }
        var expr = parseExpression();
        if (!parseOperator(")")) {
          throw new Error("Expected `)`");
        }
        return expr;
      }
      function parseAtom() {
        return parseParenthesizedExpression() || parseLicenseRef() || parseLicense();
      }
      function makeBinaryOpParser(operator, nextParser) {
        return function parseBinaryOp() {
          var left = nextParser();
          if (!left) {
            return;
          }
          if (!parseOperator(operator)) {
            return left;
          }
          var right = parseBinaryOp();
          if (!right) {
            throw new Error("Expected expression");
          }
          return {
            left,
            conjunction: operator.toLowerCase(),
            right
          };
        };
      }
      var parseAnd = makeBinaryOpParser("AND", parseAtom);
      var parseExpression = makeBinaryOpParser("OR", parseAnd);
      var node = parseExpression();
      if (!node || hasMore()) {
        throw new Error("Syntax error");
      }
      return node;
    };
  }
});
export default require_parse();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3NwZHgtZXhwcmVzc2lvbi1wYXJzZS9wYXJzZS5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxzcGR4LWV4cHJlc3Npb24tcGFyc2VcXFxccGFyc2UuanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcc3BkeC1leHByZXNzaW9uLXBhcnNlXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9zcGR4LWV4cHJlc3Npb24tcGFyc2UvcGFyc2UuanNcIjsndXNlIHN0cmljdCdcblxuLy8gVGhlIEFCTkYgZ3JhbW1hciBpbiB0aGUgc3BlYyBpcyB0b3RhbGx5IGFtYmlndW91cy5cbi8vXG4vLyBUaGlzIHBhcnNlciBmb2xsb3dzIHRoZSBvcGVyYXRvciBwcmVjZWRlbmNlIGRlZmluZWQgaW4gdGhlXG4vLyBgT3JkZXIgb2YgUHJlY2VkZW5jZSBhbmQgUGFyZW50aGVzZXNgIHNlY3Rpb24uXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRva2Vucykge1xuICB2YXIgaW5kZXggPSAwXG5cbiAgZnVuY3Rpb24gaGFzTW9yZSAoKSB7XG4gICAgcmV0dXJuIGluZGV4IDwgdG9rZW5zLmxlbmd0aFxuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW4gKCkge1xuICAgIHJldHVybiBoYXNNb3JlKCkgPyB0b2tlbnNbaW5kZXhdIDogbnVsbFxuICB9XG5cbiAgZnVuY3Rpb24gbmV4dCAoKSB7XG4gICAgaWYgKCFoYXNNb3JlKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpXG4gICAgfVxuICAgIGluZGV4KytcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlT3BlcmF0b3IgKG9wZXJhdG9yKSB7XG4gICAgdmFyIHQgPSB0b2tlbigpXG4gICAgaWYgKHQgJiYgdC50eXBlID09PSAnT1BFUkFUT1InICYmIG9wZXJhdG9yID09PSB0LnN0cmluZykge1xuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm4gdC5zdHJpbmdcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdpdGggKCkge1xuICAgIGlmIChwYXJzZU9wZXJhdG9yKCdXSVRIJykpIHtcbiAgICAgIHZhciB0ID0gdG9rZW4oKVxuICAgICAgaWYgKHQgJiYgdC50eXBlID09PSAnRVhDRVBUSU9OJykge1xuICAgICAgICBuZXh0KClcbiAgICAgICAgcmV0dXJuIHQuc3RyaW5nXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGV4Y2VwdGlvbiBhZnRlciBgV0lUSGAnKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTGljZW5zZVJlZiAoKSB7XG4gICAgLy8gVE9ETzogQWN0dWFsbHksIGV2ZXJ5dGhpbmcgaXMgY29uY2F0ZW5hdGVkIGludG8gb25lIHN0cmluZ1xuICAgIC8vIGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5IGJ1dCBpdCBjb3VsZCBiZSBiZXR0ZXIgdG8gcmV0dXJuXG4gICAgLy8gYSBuaWNlIHN0cnVjdHVyZS5cbiAgICB2YXIgYmVnaW4gPSBpbmRleFxuICAgIHZhciBzdHJpbmcgPSAnJ1xuICAgIHZhciB0ID0gdG9rZW4oKVxuICAgIGlmICh0LnR5cGUgPT09ICdET0NVTUVOVFJFRicpIHtcbiAgICAgIG5leHQoKVxuICAgICAgc3RyaW5nICs9ICdEb2N1bWVudFJlZi0nICsgdC5zdHJpbmcgKyAnOidcbiAgICAgIGlmICghcGFyc2VPcGVyYXRvcignOicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYDpgIGFmdGVyIGBEb2N1bWVudFJlZi0uLi5gJylcbiAgICAgIH1cbiAgICB9XG4gICAgdCA9IHRva2VuKClcbiAgICBpZiAodC50eXBlID09PSAnTElDRU5TRVJFRicpIHtcbiAgICAgIG5leHQoKVxuICAgICAgc3RyaW5nICs9ICdMaWNlbnNlUmVmLScgKyB0LnN0cmluZ1xuICAgICAgcmV0dXJuIHsgbGljZW5zZTogc3RyaW5nIH1cbiAgICB9XG4gICAgaW5kZXggPSBiZWdpblxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMaWNlbnNlICgpIHtcbiAgICB2YXIgdCA9IHRva2VuKClcbiAgICBpZiAodCAmJiB0LnR5cGUgPT09ICdMSUNFTlNFJykge1xuICAgICAgbmV4dCgpXG4gICAgICB2YXIgbm9kZSA9IHsgbGljZW5zZTogdC5zdHJpbmcgfVxuICAgICAgaWYgKHBhcnNlT3BlcmF0b3IoJysnKSkge1xuICAgICAgICBub2RlLnBsdXMgPSB0cnVlXG4gICAgICB9XG4gICAgICB2YXIgZXhjZXB0aW9uID0gcGFyc2VXaXRoKClcbiAgICAgIGlmIChleGNlcHRpb24pIHtcbiAgICAgICAgbm9kZS5leGNlcHRpb24gPSBleGNlcHRpb25cbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQYXJlbnRoZXNpemVkRXhwcmVzc2lvbiAoKSB7XG4gICAgdmFyIGxlZnQgPSBwYXJzZU9wZXJhdG9yKCcoJylcbiAgICBpZiAoIWxlZnQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBleHByID0gcGFyc2VFeHByZXNzaW9uKClcblxuICAgIGlmICghcGFyc2VPcGVyYXRvcignKScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGApYCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cHJcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQXRvbSAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHBhcnNlUGFyZW50aGVzaXplZEV4cHJlc3Npb24oKSB8fFxuICAgICAgcGFyc2VMaWNlbnNlUmVmKCkgfHxcbiAgICAgIHBhcnNlTGljZW5zZSgpXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUJpbmFyeU9wUGFyc2VyIChvcGVyYXRvciwgbmV4dFBhcnNlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBwYXJzZUJpbmFyeU9wICgpIHtcbiAgICAgIHZhciBsZWZ0ID0gbmV4dFBhcnNlcigpXG4gICAgICBpZiAoIWxlZnQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyc2VPcGVyYXRvcihvcGVyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGxlZnRcbiAgICAgIH1cblxuICAgICAgdmFyIHJpZ2h0ID0gcGFyc2VCaW5hcnlPcCgpXG4gICAgICBpZiAoIXJpZ2h0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZXhwcmVzc2lvbicpXG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICBjb25qdW5jdGlvbjogb3BlcmF0b3IudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgcmlnaHQ6IHJpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhcnNlQW5kID0gbWFrZUJpbmFyeU9wUGFyc2VyKCdBTkQnLCBwYXJzZUF0b20pXG4gIHZhciBwYXJzZUV4cHJlc3Npb24gPSBtYWtlQmluYXJ5T3BQYXJzZXIoJ09SJywgcGFyc2VBbmQpXG5cbiAgdmFyIG5vZGUgPSBwYXJzZUV4cHJlc3Npb24oKVxuICBpZiAoIW5vZGUgfHwgaGFzTW9yZSgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTeW50YXggZXJyb3InKVxuICB9XG4gIHJldHVybiBub2RlXG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7QUFBQTtBQUFBO0FBT0EsV0FBTyxVQUFVLFNBQVUsUUFBUTtBQUNqQyxVQUFJLFFBQVE7QUFFWixlQUFTLFVBQVc7QUFDbEIsZUFBTyxRQUFRLE9BQU87QUFBQSxNQUN4QjtBQUVBLGVBQVMsUUFBUztBQUNo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
