var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/quick-lru/index.js
var require_index = __commonJS({
  "node_modules/quick-lru/index.js"(exports, module) {
    var QuickLRU = class {
      constructor(options = {}) {
        if (!(options.maxSize && options.maxSize > 0)) {
          throw new TypeError("`maxSize` must be a number greater than 0");
        }
        this.maxSize = options.maxSize;
        this.cache = /* @__PURE__ */ new Map();
        this.oldCache = /* @__PURE__ */ new Map();
        this._size = 0;
      }
      _set(key, value) {
        this.cache.set(key, value);
        this._size++;
        if (this._size >= this.maxSize) {
          this._size = 0;
          this.oldCache = this.cache;
          this.cache = /* @__PURE__ */ new Map();
        }
      }
      get(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }
        if (this.oldCache.has(key)) {
          const value = this.oldCache.get(key);
          this.oldCache.delete(key);
          this._set(key, value);
          return value;
        }
      }
      set(key, value) {
        if (this.cache.has(key)) {
          this.cache.set(key, value);
        } else {
          this._set(key, value);
        }
        return this;
      }
      has(key) {
        return this.cache.has(key) || this.oldCache.has(key);
      }
      peek(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }
        if (this.oldCache.has(key)) {
          return this.oldCache.get(key);
        }
      }
      delete(key) {
        const deleted = this.cache.delete(key);
        if (deleted) {
          this._size--;
        }
        return this.oldCache.delete(key) || deleted;
      }
      clear() {
        this.cache.clear();
        this.oldCache.clear();
        this._size = 0;
      }
      *keys() {
        for (const [key] of this) {
          yield key;
        }
      }
      *values() {
        for (const [, value] of this) {
          yield value;
        }
      }
      *[Symbol.iterator]() {
        for (const item of this.cache) {
          yield item;
        }
        for (const item of this.oldCache) {
          const [key] = item;
          if (!this.cache.has(key)) {
            yield item;
          }
        }
      }
      get size() {
        let oldCacheSize = 0;
        for (const key of this.oldCache.keys()) {
          if (!this.cache.has(key)) {
            oldCacheSize++;
          }
        }
        return this._size + oldCacheSize;
      }
    };
    module.exports = QuickLRU;
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3F1aWNrLWxydS9pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxxdWljay1scnVcXFxcaW5kZXguanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxccXVpY2stbHJ1XCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9xdWljay1scnUvaW5kZXguanNcIjsndXNlIHN0cmljdCc7XG5cbmNsYXNzIFF1aWNrTFJVIHtcblx0Y29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG5cdFx0aWYgKCEob3B0aW9ucy5tYXhTaXplICYmIG9wdGlvbnMubWF4U2l6ZSA+IDApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdgbWF4U2l6ZWAgbXVzdCBiZSBhIG51bWJlciBncmVhdGVyIHRoYW4gMCcpO1xuXHRcdH1cblxuXHRcdHRoaXMubWF4U2l6ZSA9IG9wdGlvbnMubWF4U2l6ZTtcblx0XHR0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuXHRcdHRoaXMub2xkQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdFx0dGhpcy5fc2l6ZSA9IDA7XG5cdH1cblxuXHRfc2V0KGtleSwgdmFsdWUpIHtcblx0XHR0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlKTtcblx0XHR0aGlzLl9zaXplKys7XG5cblx0XHRpZiAodGhpcy5fc2l6ZSA+PSB0aGlzLm1heFNpemUpIHtcblx0XHRcdHRoaXMuX3NpemUgPSAwO1xuXHRcdFx0dGhpcy5vbGRDYWNoZSA9IHRoaXMuY2FjaGU7XG5cdFx0XHR0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuXHRcdH1cblx0fVxuXG5cdGdldChrZXkpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMub2xkQ2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdGNvbnN0IHZhbHVlID0gdGhpcy5vbGRDYWNoZS5nZXQoa2V5KTtcblx0XHRcdHRoaXMub2xkQ2FjaGUuZGVsZXRlKGtleSk7XG5cdFx0XHR0aGlzLl9zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9XG5cblx0c2V0KGtleSwgdmFsdWUpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0dGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3NldChrZXksIHZhbHVlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGhhcyhrZXkpIHtcblx0XHRyZXR1cm4gdGhpcy5jYWNoZS5oYXMoa2V5KSB8fCB0aGlzLm9sZENhY2hlLmhhcyhrZXkpO1xuXHR9XG5cblx0cGVlayhrZXkpIHtcblx0XHRpZiAodGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGUuZ2V0KGtleSk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMub2xkQ2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiB0aGlzLm9sZENhY2hlLmdldChrZXkpO1xuXHRcdH1cblx0fVxuXG5cdGRlbGV0ZShrZXkpIHtcblx0XHRjb25zdCBkZWxldGVkID0gdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcblx0XHRpZiAoZGVsZXRlZCkge1xuXHRcdFx0dGhpcy5fc2l6ZS0tO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm9sZENhY2hlLmRlbGV0ZShrZXkpIHx8IGRlbGV0ZWQ7XG5cdH1cblxuXHRjbGVhcigpIHtcblx0XHR0aGlzLmNhY2hlLmNsZWFyKCk7XG5cdFx0dGhpcy5vbGRDYWNoZS5jbGVhcigpO1xuXHRcdHRoaXMuX3NpemUgPSAwO1xuXHR9XG5cblx0KiBrZXlzKCkge1xuXHRcdGZvciAoY29uc3QgW2tleV0gb2YgdGhpcykge1xuXHRcdFx0eWllbGQga2V5O1xuXHRcdH1cblx0fVxuXG5cdCogdmFsdWVzKCkge1xuXHRcdGZvciAoY29uc3QgWywgdmFsdWVdIG9mIHRoaXMpIHtcblx0XHRcdHlpZWxkIHZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdCogW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG5cdFx0Zm9yIChjb25zdCBpdGVtIG9mIHRoaXMuY2FjaGUpIHtcblx0XHRcdHlpZWxkIGl0ZW07XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCBpdGVtIG9mIHRoaXMub2xkQ2FjaGUpIHtcblx0XHRcdGNvbnN0IFtrZXldID0gaXRlbTtcblx0XHRcdGlmICghdGhpcy5jYWNoZS5oYXMoa2V5KSkge1xuXHRcdFx0XHR5aWVsZCBpdGVtO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGdldCBzaXplKCkge1xuXHRcdGxldCBvbGRDYWNoZVNpemUgPSAwO1xuXHRcdGZvciAoY29uc3Qga2V5IG9mIHRoaXMub2xkQ2FjaGUua2V5cygpKSB7XG5cdFx0XHRpZiAoIXRoaXMuY2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdFx0b2xkQ2FjaGVTaXplKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuX3NpemUgKyBvbGRDYWNoZVNpemU7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWlja0xSVTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUFFQSxRQUFNLFdBQU4sTUFBZTtBQUFBLE1BQ2QsWUFBWSxVQUFVLENBQUMsR0FBRztBQUN6QixZQUFJLEVBQUUsUUFBUSxXQUFXLFFBQVEsVUFBVSxJQUFJO0FBQzlDLGdCQUFNLElBQUksVUFBVSwyQ0FBMkM7QUFBQSxRQUNoRTtBQUVBLGFBQUssVUFBVSxRQUFRO0FBQ3ZCLGFBQUssUUFBUSxvQkFBSSxJQUFJO0FBQ3JCLGFBQUssV0FBVyxvQkFBSSxJQUFJO0FBQ3hCLGFBQUssUUFBUTtBQUFBLE1BQ2Q7QUFBQSxNQUVBLEtBQUssS0FBSyxPQUFPO0FBQ2hCLGFBQUssTUFBTSxJQUFJLEtBQUssS0FBSztBQUN6QixhQUFLO0FBRUwsWUFBSSxLQUFLLFNBQVMsS0FBSyxTQUFTO0FBQy9CLGVBQUssUUFBUTtBQUNiLGVBQUssV0FBVyxLQUFLO0FBQ3JCLGVBQUssUUFBUSxvQkFBSSxJQUFJO0FBQUEsUUFDdEI7QUFBQSxNQUNEO0FBQUEsTUFFQSxJQUFJLEtBQUs7QUFDUixZQUFJLEtBQUssTUFBTSxJQUFJLEdBQUcsR0FBRztBQUN4QixpQkFBTyxLQUFLLE1BQU0sSUFBSSxHQUFHO0FBQUEsUUFDMUI7QUFFQSxZQUFJLEtBQUssU0FBUyxJQUFJLEdBQUcsR0FBRztBQUMzQixnQkFBTSxRQUFRLEtBQUssU0FBUyxJQUFJLEdBQUc7QUFDbkMsZUFBSyxTQUFTLE9BQU8sR0FBRztBQUN4QixlQUFLLEtBQUssS0FBSyxLQUFLO0FBQ3BCLGlCQUFPO0FBQUEsUUFDUjtBQUFBLE1BQ0Q7QUFBQSxNQUVBLElBQUksS0FBSyxPQUFPO0FBQ2YsWUFBSSxLQUFLLE1BQU0sSUFBSSxHQUFHLEdBQUc7QUFDeEIsZUFBSyxNQUFNLElBQUksS0FBSyxLQUFLO0FBQUEsUUFDMUIsT0FBTztBQUNOLGVBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxRQUNyQjtBQUVBLGVBQU87QUFBQSxNQUNSO0FBQUEsTUFFQSxJQUFJLEtBQUs7QUFDUixlQUFPLEtBQUssTUFBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLFNBQVMsSUFBSSxHQUFHO0FBQUEsTUFDcEQ7QUFBQSxNQUVBLEtBQUssS0FBSztBQUNULFlBQUksS0FBSyxNQUFNLElBQUksR0FBRyxHQUFHO0FBQ3hCLGlCQUFPLEtBQUssTUFBTSxJQUFJLEdBQUc7QUFBQSxRQUMxQjtBQUVBLFlBQUksS0FBSyxTQUFTLElBQUksR0FBRyxHQUFHO0FBQzNCLGlCQUFPLEtBQUssU0FBUyxJQUFJLEdBQUc7QUFBQSxRQUM3QjtBQUFBLE1BQ0Q7QUFBQSxNQUVBLE9BQU8sS0FBSztBQUNYLGNBQU0sVUFBVSxLQUFLLE1BQU0sT0FBTyxHQUFHO0FBQ3JDLFlBQUksU0FBUztBQUNaLGVBQUs7QUFBQSxRQUNOO0FBRUEsZUFBTyxLQUFLLFNBQVMsT0FBTyxHQUFHLEtBQUs7QUFBQSxNQUNyQztBQUFBLE1BRUEsUUFBUTtBQUNQLGFBQUssTUFBTSxNQUFNO0FBQ2pCLGFBQUssU0FBUyxNQUFNO0FBQ3BCLGFBQUssUUFBUTtBQUFBLE1BQ2Q7QUFBQSxNQUVBLENBQUUsT0FBTztBQUNSLG1CQUFXLENBQUMsR0FBRyxLQUFLLE1BQU07QUFDekIsZ0JBQU07QUFBQSxRQUNQO0FBQUEsTUFDRDtBQUFBLE1BRUEsQ0FBRSxTQUFTO0FBQ1YsbUJBQVcsQ0FBQyxFQUFFLEtBQUssS0FBSyxNQUFNO0FBQzdCLGdCQUFNO0FBQUEsUUFDUDtBQUFBLE1BQ0Q7QUFBQSxNQUVBLEVBQUcsT0FBTyxRQUFRLElBQUk7QUFDckIsbUJBQVcsUUFBUSxLQUFLLE9BQU87QUFDOUIsZ0JBQU07QUFBQSxRQUNQO0FBRUEsbUJBQVcsUUFBUSxLQUFLLFVBQVU7QUFDakMsZ0JBQU0sQ0FBQyxHQUFHLElBQUk7QUFDZCxjQUFJLENBQUMsS0FBSyxNQUFNLElBQUksR0FBRyxHQUFHO0FBQ3pCLGtCQUFNO0FBQUEsVUFDUDtBQUFBLFFBQ0Q7QUFBQSxNQUNEO0FBQUEsTUFFQSxJQUFJLE9BQU87QUFDVixZQUFJLGVBQWU7QUFDbkIsbUJBQVcsT0FBTyxLQUFLLFNBQVMsS0FBSyxHQUFHO0FBQ3ZDLGNBQUksQ0FBQyxLQUFLLE1BQU0sSUFBSSxHQUFHLEdBQUc7QUFDekI7QUFBQSxVQUNEO0FBQUEsUUFDRDtBQUVBLGVBQU8sS0FBSyxRQUFRO0FBQUEsTUFDckI7QUFBQSxJQUNEO0FBRUEsV0FBTyxVQUFVO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
