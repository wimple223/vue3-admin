// node_modules/jiti/lib/jiti-native.mjs
var isDeno = "Deno" in globalThis;
function createJiti(parentURL, jitiOptions) {
  parentURL = normalizeParentURL(parentURL);
  function jiti() {
    throw unsupportedError(
      "`jiti()` is not supported in native mode, use `jiti.import()` instead."
    );
  }
  jiti.resolve = () => {
    throw unsupportedError("`jiti.resolve()` is not supported in native mode.");
  };
  jiti.esmResolve = (id, opts) => {
    try {
      const importMeta = jitiOptions?.importMeta || import.meta;
      if (isDeno) {
        return importMeta.resolve(id);
      }
      const parent = normalizeParentURL(opts?.parentURL || parentURL);
      return importMeta.resolve(id, parent);
    } catch (error) {
      if (opts?.try) {
        return void 0;
      } else {
        throw error;
      }
    }
  };
  jiti.import = async function(id, opts) {
    for (const suffix of ["", "/index"]) {
      for (const ext of ["", ".js", ".mjs", ".cjs", ".ts", ".tsx", ".mts", ".cts"]) {
        try {
          const resolved = this.esmResolve(id + suffix + ext, opts);
          if (!resolved) {
            continue;
          }
          let importAttrs = void 0;
          if (resolved.endsWith(".json")) {
            importAttrs = { with: { type: "json" } };
          }
          return await import(resolved, importAttrs);
        } catch (error) {
          if (error.code === "ERR_MODULE_NOT_FOUND" || error.code === "ERR_UNSUPPORTED_DIR_IMPORT") {
            continue;
          }
          if (opts?.try) {
            return void 0;
          }
          throw error;
        }
      }
    }
    if (!opts?.try) {
      const parent = normalizeParentURL(opts?.parentURL || parentURL);
      const error = new Error(
        `[jiti] [ERR_MODULE_NOT_FOUND] Cannot import '${id}' from '${parent}'.`
      );
      error.code = "ERR_MODULE_NOT_FOUND";
      throw error;
    }
  };
  jiti.transform = () => {
    throw unsupportedError(
      "`jiti.transform()` is not supported in native mode."
    );
  };
  jiti.evalModule = () => {
    throw unsupportedError(
      "`jiti.evalModule()` is not supported in native mode."
    );
  };
  jiti.main = void 0;
  jiti.extensions = /* @__PURE__ */ Object.create(null);
  jiti.cache = /* @__PURE__ */ Object.create(null);
  return jiti;
}
var jiti_native_default = createJiti;
function unsupportedError(message) {
  throw new Error(
    `[jiti] ${message} (import or require 'jiti' instead of 'jiti/native' for more features).`
  );
}
function normalizeParentURL(input) {
  if (!input) {
    return "file:///";
  }
  if (typeof filename !== "string" || input.startsWith("file://")) {
    return input;
  }
  if (input.endsWith("/")) {
    input += "_";
  }
  return `file://${input}`;
}
export {
  createJiti,
  jiti_native_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2ppdGkvbGliL2ppdGktbmF0aXZlLm1qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxqaXRpXFxcXGxpYlxcXFxqaXRpLW5hdGl2ZS5tanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcaml0aVxcXFxsaWJcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0U6L3FkL3Z1ZTMtYWRtaW4vbm9kZV9tb2R1bGVzL2ppdGkvbGliL2ppdGktbmF0aXZlLm1qc1wiOy8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkppdGl9IEppdGlcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5KaXRpT3B0aW9uc30gSml0aU9wdGlvbnNcbiAqL1xuXG5jb25zdCBpc0Rlbm8gPSBcIkRlbm9cIiBpbiBnbG9iYWxUaGlzO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfFVSTH0gW3BhcmVudFVSTF1cbiAqIEBwYXJhbSB7Sml0aU9wdGlvbnN9IFtqaXRpT3B0aW9uc11cbiAqIEByZXR1cm5zIHtKaXRpfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSml0aShwYXJlbnRVUkwsIGppdGlPcHRpb25zKSB7XG4gIHBhcmVudFVSTCA9IG5vcm1hbGl6ZVBhcmVudFVSTChwYXJlbnRVUkwpO1xuXG4gIC8qKiBAdHlwZSB7Sml0aX0gKi9cbiAgZnVuY3Rpb24gaml0aSgpIHtcbiAgICB0aHJvdyB1bnN1cHBvcnRlZEVycm9yKFxuICAgICAgXCJgaml0aSgpYCBpcyBub3Qgc3VwcG9ydGVkIGluIG5hdGl2ZSBtb2RlLCB1c2UgYGppdGkuaW1wb3J0KClgIGluc3RlYWQuXCIsXG4gICAgKTtcbiAgfVxuXG4gIGppdGkucmVzb2x2ZSA9ICgpID0+IHtcbiAgICB0aHJvdyB1bnN1cHBvcnRlZEVycm9yKFwiYGppdGkucmVzb2x2ZSgpYCBpcyBub3Qgc3VwcG9ydGVkIGluIG5hdGl2ZSBtb2RlLlwiKTtcbiAgfTtcblxuICBqaXRpLmVzbVJlc29sdmUgPSAoaWQsIG9wdHMpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaW1wb3J0TWV0YSA9IGppdGlPcHRpb25zPy5pbXBvcnRNZXRhIHx8IGltcG9ydC5tZXRhO1xuICAgICAgaWYgKGlzRGVubykge1xuICAgICAgICAvLyBEZW5vIHRocm93cyBUeXBlRXJyb3I6IEludmFsaWQgYXJndW1lbnRzIHdoZW4gcGFzc2luZyBwYXJlbnRVUkxcbiAgICAgICAgcmV0dXJuIGltcG9ydE1ldGEucmVzb2x2ZShpZCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJlbnQgPSBub3JtYWxpemVQYXJlbnRVUkwob3B0cz8ucGFyZW50VVJMIHx8IHBhcmVudFVSTCk7XG4gICAgICByZXR1cm4gaW1wb3J0TWV0YS5yZXNvbHZlKGlkLCBwYXJlbnQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAob3B0cz8udHJ5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaml0aS5pbXBvcnQgPSBhc3luYyBmdW5jdGlvbiAoaWQsIG9wdHMpIHtcbiAgICBmb3IgKGNvbnN0IHN1ZmZpeCBvZiBbXCJcIiwgXCIvaW5kZXhcIl0pIHtcbiAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgZm9yIChjb25zdCBleHQgb2YgW1wiXCIsIFwiLmpzXCIsIFwiLm1qc1wiLCBcIi5janNcIiwgXCIudHNcIiwgXCIudHN4XCIsIFwiLm10c1wiLCBcIi5jdHNcIl0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXNvbHZlZCA9IHRoaXMuZXNtUmVzb2x2ZShpZCArIHN1ZmZpeCArIGV4dCwgb3B0cyk7XG4gICAgICAgICAgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBpbXBvcnRBdHRycyA9IHVuZGVmaW5lZFxuICAgICAgICAgIGlmIChyZXNvbHZlZC5lbmRzV2l0aCgnLmpzb24nKSkge1xuICAgICAgICAgICAgaW1wb3J0QXR0cnMgPSB7IHdpdGg6IHsgdHlwZTogJ2pzb24nfX1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGltcG9ydChyZXNvbHZlZCwgaW1wb3J0QXR0cnMpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnRVJSX01PRFVMRV9OT1RfRk9VTkQnIHx8IGVycm9yLmNvZGUgPT09ICdFUlJfVU5TVVBQT1JURURfRElSX0lNUE9SVCcpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRzPy50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghb3B0cz8udHJ5KSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBub3JtYWxpemVQYXJlbnRVUkwob3B0cz8ucGFyZW50VVJMIHx8IHBhcmVudFVSTCk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgYFtqaXRpXSBbRVJSX01PRFVMRV9OT1RfRk9VTkRdIENhbm5vdCBpbXBvcnQgJyR7aWR9JyBmcm9tICcke3BhcmVudH0nLmAsXG4gICAgICApO1xuICAgICAgZXJyb3IuY29kZSA9IFwiRVJSX01PRFVMRV9OT1RfRk9VTkRcIjtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICBqaXRpLnRyYW5zZm9ybSA9ICgpID0+IHtcbiAgICB0aHJvdyB1bnN1cHBvcnRlZEVycm9yKFxuICAgICAgXCJgaml0aS50cmFuc2Zvcm0oKWAgaXMgbm90IHN1cHBvcnRlZCBpbiBuYXRpdmUgbW9kZS5cIixcbiAgICApO1xuICB9O1xuXG4gIGppdGkuZXZhbE1vZHVsZSA9ICgpID0+IHtcbiAgICB0aHJvdyB1bnN1cHBvcnRlZEVycm9yKFxuICAgICAgXCJgaml0aS5ldmFsTW9kdWxlKClgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gbmF0aXZlIG1vZGUuXCIsXG4gICAgKTtcbiAgfTtcblxuICBqaXRpLm1haW4gPSB1bmRlZmluZWQ7XG4gIGppdGkuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGppdGkuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJldHVybiBqaXRpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVKaXRpO1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXG4gKi9cbmZ1bmN0aW9uIHVuc3VwcG9ydGVkRXJyb3IobWVzc2FnZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYFtqaXRpXSAke21lc3NhZ2V9IChpbXBvcnQgb3IgcmVxdWlyZSAnaml0aScgaW5zdGVhZCBvZiAnaml0aS9uYXRpdmUnIGZvciBtb3JlIGZlYXR1cmVzKS5gLFxuICApO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQYXJlbnRVUkwoaW5wdXQpIHtcbiAgaWYgKCFpbnB1dCkge1xuICAgIHJldHVybiBcImZpbGU6Ly8vXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiBmaWxlbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBpbnB1dC5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICBpZiAoaW5wdXQuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgaW5wdXQgKz0gXCJfXCI7IC8vIGFwcGVuZCBhIGR1bW15IGZpbGVuYW1lXG4gIH1cbiAgcmV0dXJuIGBmaWxlOi8vJHtpbnB1dH1gO1xufVxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUtBLElBQU0sU0FBUyxVQUFVO0FBT2xCLFNBQVMsV0FBVyxXQUFXLGFBQWE7QUFDakQsY0FBWSxtQkFBbUIsU0FBUztBQUd4QyxXQUFTLE9BQU87QUFDZCxVQUFNO0FBQUEsTUFDSjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsT0FBSyxVQUFVLE1BQU07QUFDbkIsVUFBTSxpQkFBaUIsbURBQW1EO0FBQUEsRUFDNUU7QUFFQSxPQUFLLGFBQWEsQ0FBQyxJQUFJLFNBQVM7QUFDOUIsUUFBSTtBQUNGLFlBQU0sYUFBYSxhQUFhLGNBQWM7QUFDOUMsVUFBSSxRQUFRO0FBRVYsZUFBTyxXQUFXLFFBQVEsRUFBRTtBQUFBLE1BQzlCO0FBQ0EsWUFBTSxTQUFTLG1CQUFtQixNQUFNLGFBQWEsU0FBUztBQUM5RCxhQUFPLFdBQVcsUUFBUSxJQUFJLE1BQU07QUFBQSxJQUN0QyxTQUFTLE9BQU87QUFDZCxVQUFJLE1BQU0sS0FBSztBQUNiLGVBQU87QUFBQSxNQUNULE9BQU87QUFDTCxjQUFNO0FBQUEsTUFDUjtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBRUEsT0FBSyxTQUFTLGVBQWdCLElBQUksTUFBTTtBQUN0QyxlQUFXLFVBQVUsQ0FBQyxJQUFJLFFBQVEsR0FBRztBQUVuQyxpQkFBVyxPQUFPLENBQUMsSUFBSSxPQUFPLFFBQVEsUUFBUSxPQUFPLFFBQVEsUUFBUSxNQUFNLEdBQUc7QUFDNUUsWUFBSTtBQUNGLGdCQUFNLFdBQVcsS0FBSyxXQUFXLEtBQUssU0FBUyxLQUFLLElBQUk7QUFDeEQsY0FBSSxDQUFDLFVBQVU7QUFDYjtBQUFBLFVBQ0Y7QUFDQSxjQUFJLGNBQWM7QUFDbEIsY0FBSSxTQUFTLFNBQVMsT0FBTyxHQUFHO0FBQzlCLDBCQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sT0FBTSxFQUFDO0FBQUEsVUFDdkM7QUFDQSxpQkFBTyxNQUFNLE9BQU8sVUFBVTtBQUFBLFFBQ2hDLFNBQVMsT0FBTztBQUNkLGNBQUksTUFBTSxTQUFTLDBCQUEwQixNQUFNLFNBQVMsOEJBQThCO0FBQ3hGO0FBQUEsVUFDRjtBQUNBLGNBQUksTUFBTSxLQUFLO0FBQ2IsbUJBQU87QUFBQSxVQUNUO0FBQ0EsZ0JBQU07QUFBQSxRQUNSO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFDQSxRQUFJLENBQUMsTUFBTSxLQUFLO0FBQ2QsWUFBTSxTQUFTLG1CQUFtQixNQUFNLGFBQWEsU0FBUztBQUM5RCxZQUFNLFFBQVEsSUFBSTtBQUFBLFFBQ2hCLGdEQUFnRCxFQUFFLFdBQVcsTUFBTTtBQUFBLE1BQ3JFO0FBQ0EsWUFBTSxPQUFPO0FBQ2IsWUFBTTtBQUFBLElBQ1I7QUFBQSxFQUNGO0FBRUEsT0FBSyxZQUFZLE1BQU07QUFDckIsVUFBTTtBQUFBLE1BQ0o7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLE9BQUssYUFBYSxNQUFNO0FBQ3RCLFVBQU07QUFBQSxNQUNKO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxPQUFLLE9BQU87QUFDWixPQUFLLGFBQWEsdUJBQU8sT0FBTyxJQUFJO0FBQ3BDLE9BQUssUUFBUSx1QkFBTyxPQUFPLElBQUk7QUFFL0IsU0FBTztBQUNUO0FBRUEsSUFBTyxzQkFBUTtBQUtmLFNBQVMsaUJBQWlCLFNBQVM7QUFDakMsUUFBTSxJQUFJO0FBQUEsSUFDUixVQUFVLE9BQU87QUFBQSxFQUNuQjtBQUNGO0FBRUEsU0FBUyxtQkFBbUIsT0FBTztBQUNqQyxNQUFJLENBQUMsT0FBTztBQUNWLFdBQU87QUFBQSxFQUNUO0FBQ0EsTUFBSSxPQUFPLGFBQWEsWUFBWSxNQUFNLFdBQVcsU0FBUyxHQUFHO0FBQy9ELFdBQU87QUFBQSxFQUNUO0FBQ0EsTUFBSSxNQUFNLFNBQVMsR0FBRyxHQUFHO0FBQ3ZCLGFBQVM7QUFBQSxFQUNYO0FBQ0EsU0FBTyxVQUFVLEtBQUs7QUFDeEI7IiwKICAibmFtZXMiOiBbXQp9Cg==
