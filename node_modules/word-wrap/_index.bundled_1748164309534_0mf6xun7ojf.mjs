var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/word-wrap/index.js
var require_index = __commonJS({
  "node_modules/word-wrap/index.js"(exports, module) {
    function trimEnd(str) {
      let lastCharPos = str.length - 1;
      let lastChar = str[lastCharPos];
      while (lastChar === " " || lastChar === "	") {
        lastChar = str[--lastCharPos];
      }
      return str.substring(0, lastCharPos + 1);
    }
    function trimTabAndSpaces(str) {
      const lines = str.split("\n");
      const trimmedLines = lines.map((line) => trimEnd(line));
      return trimmedLines.join("\n");
    }
    module.exports = function(str, options) {
      options = options || {};
      if (str == null) {
        return str;
      }
      var width = options.width || 50;
      var indent = typeof options.indent === "string" ? options.indent : "  ";
      var newline = options.newline || "\n" + indent;
      var escape = typeof options.escape === "function" ? options.escape : identity;
      var regexString = ".{1," + width + "}";
      if (options.cut !== true) {
        regexString += "([\\s\u200B]+|$)|[^\\s\u200B]+?([\\s\u200B]+|$)";
      }
      var re = new RegExp(regexString, "g");
      var lines = str.match(re) || [];
      var result = indent + lines.map(function(line) {
        if (line.slice(-1) === "\n") {
          line = line.slice(0, line.length - 1);
        }
        return escape(line);
      }).join(newline);
      if (options.trim === true) {
        result = trimTabAndSpaces(result);
      }
      return result;
    };
    function identity(str) {
      return str;
    }
  }
});
export default require_index();
/*! Bundled license information:

word-wrap/index.js:
  (*!
  * word-wrap <https://github.com/jonschlinkert/word-wrap>
  *
  * Copyright (c) 2014-2023, Jon Schlinkert.
  * Released under the MIT License.
  *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3dvcmQtd3JhcC9pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx3b3JkLXdyYXBcXFxcaW5kZXguanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcd29yZC13cmFwXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy93b3JkLXdyYXAvaW5kZXguanNcIjsvKiFcbiAqIHdvcmQtd3JhcCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvd29yZC13cmFwPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDIzLCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiB0cmltRW5kKHN0cikge1xuICBsZXQgbGFzdENoYXJQb3MgPSBzdHIubGVuZ3RoIC0gMTtcbiAgbGV0IGxhc3RDaGFyID0gc3RyW2xhc3RDaGFyUG9zXTtcbiAgd2hpbGUobGFzdENoYXIgPT09ICcgJyB8fCBsYXN0Q2hhciA9PT0gJ1xcdCcpIHtcbiAgICBsYXN0Q2hhciA9IHN0clstLWxhc3RDaGFyUG9zXTtcbiAgfVxuICByZXR1cm4gc3RyLnN1YnN0cmluZygwLCBsYXN0Q2hhclBvcyArIDEpO1xufVxuXG5mdW5jdGlvbiB0cmltVGFiQW5kU3BhY2VzKHN0cikge1xuICBjb25zdCBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IHRyaW1tZWRMaW5lcyA9IGxpbmVzLm1hcCgobGluZSkgPT4gdHJpbUVuZChsaW5lKSk7XG4gIHJldHVybiB0cmltbWVkTGluZXMuam9pbignXFxuJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoc3RyID09IG51bGwpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCB8fCA1MDtcbiAgdmFyIGluZGVudCA9ICh0eXBlb2Ygb3B0aW9ucy5pbmRlbnQgPT09ICdzdHJpbmcnKVxuICAgID8gb3B0aW9ucy5pbmRlbnRcbiAgICA6ICcgICc7XG5cbiAgdmFyIG5ld2xpbmUgPSBvcHRpb25zLm5ld2xpbmUgfHwgJ1xcbicgKyBpbmRlbnQ7XG4gIHZhciBlc2NhcGUgPSB0eXBlb2Ygb3B0aW9ucy5lc2NhcGUgPT09ICdmdW5jdGlvbidcbiAgICA/IG9wdGlvbnMuZXNjYXBlXG4gICAgOiBpZGVudGl0eTtcblxuICB2YXIgcmVnZXhTdHJpbmcgPSAnLnsxLCcgKyB3aWR0aCArICd9JztcbiAgaWYgKG9wdGlvbnMuY3V0ICE9PSB0cnVlKSB7XG4gICAgcmVnZXhTdHJpbmcgKz0gJyhbXFxcXHNcXHUyMDBCXSt8JCl8W15cXFxcc1xcdTIwMEJdKz8oW1xcXFxzXFx1MjAwQl0rfCQpJztcbiAgfVxuXG4gIHZhciByZSA9IG5ldyBSZWdFeHAocmVnZXhTdHJpbmcsICdnJyk7XG4gIHZhciBsaW5lcyA9IHN0ci5tYXRjaChyZSkgfHwgW107XG4gIHZhciByZXN1bHQgPSBpbmRlbnQgKyBsaW5lcy5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgIGlmIChsaW5lLnNsaWNlKC0xKSA9PT0gJ1xcbicpIHtcbiAgICAgIGxpbmUgPSBsaW5lLnNsaWNlKDAsIGxpbmUubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIHJldHVybiBlc2NhcGUobGluZSk7XG4gIH0pLmpvaW4obmV3bGluZSk7XG5cbiAgaWYgKG9wdGlvbnMudHJpbSA9PT0gdHJ1ZSkge1xuICAgIHJlc3VsdCA9IHRyaW1UYWJBbmRTcGFjZXMocmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZnVuY3Rpb24gaWRlbnRpdHkoc3RyKSB7XG4gIHJldHVybiBzdHI7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7QUFBQTtBQUFBO0FBT0EsYUFBUyxRQUFRLEtBQUs7QUFDcEIsVUFBSSxjQUFjLElBQUksU0FBUztBQUMvQixVQUFJLFdBQVcsSUFBSSxXQUFXO0FBQzlCLGFBQU0sYUFBYSxPQUFPLGFBQWEsS0FBTTtBQUMzQyxtQkFBVyxJQUFJLEVBQUUsV0FBVztBQUFBLE1BQzlCO0FBQ0EsYUFBTyxJQUFJLFVBQVUsR0FBRyxjQUFjLENBQUM7QUFBQSxJQUN6QztBQUVBLGFBQVMsaUJBQWlCLEtBQUs7QUFDN0IsWUFBTSxRQUFRLElBQUksTUFBTSxJQUFJO0FBQzVCLFlBQU0sZUFBZSxNQUFNLElBQUksQ0FBQyxTQUFTLFFBQVEsSUFBSSxDQUFDO0FBQ3RELGFBQU8sYUFBYSxLQUFLLElBQUk7QUFBQSxJQUMvQjtBQUVBLFdBQU8sVUFBVSxTQUFTLEtBQUssU0FBUztBQUN0QyxnQkFBVSxXQUFXLENBQUM7QUFDdEIsVUFBSSxPQUFPLE1BQU07QUFDZixlQUFPO0FBQUEsTUFDVDtBQUVBLFVBQUksUUFBUSxRQUFRLFNBQVM7QUFDN0IsVUFBSSxTQUFVLE9BQU8sUUFBUSxXQUFXLFdBQ3BDLFFBQVEsU0FDUjtBQUVKLFVBQUksVUFBVSxRQUFRLFdBQVcsT0FBTztBQUN4QyxVQUFJLFNBQVMsT0FBTyxRQUFRLFdBQVcsYUFDbkMsUUFBUSxTQUNSO0FBRUosVUFBSSxjQUFjLFNBQVMsUUFBUTtBQUNuQyxVQUFJLFFBQVEsUUFBUSxNQUFNO0FBQ3hCLHVCQUFlO0FBQUEsTUFDakI7QUFFQSxVQUFJLEtBQUssSUFBSSxPQUFPLGFBQWEsR0FBRztBQUNwQyxVQUFJLFFBQVEsSUFBSSxNQUFNLEVBQUUsS0FBSyxDQUFDO0FBQzlCLFVBQUksU0FBUyxTQUFTLE1BQU0sSUFBSSxTQUFTLE1BQU07QUFDN0MsWUFBSSxLQUFLLE1BQU0sRUFBRSxNQUFNLE1BQU07QUFDM0IsaUJBQU8sS0FBSyxNQUFNLEdBQUcsS0FBSyxTQUFTLENBQUM7QUFBQSxRQUN0QztBQUNBLGVBQU8sT0FBTyxJQUFJO0FBQUEsTUFDcEIsQ0FBQyxFQUFFLEtBQUssT0FBTztBQUVmLFVBQUksUUFBUSxTQUFTLE1BQU07QUFDekIsaUJBQVMsaUJBQWlCLE1BQU07QUFBQSxNQUNsQztBQUNBLGFBQU87QUFBQSxJQUNUO0FBRUEsYUFBUyxTQUFTLEtBQUs7QUFDckIsYUFBTztBQUFBLElBQ1Q7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
