var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/natural-compare/index.js
var require_index = __commonJS({
  "node_modules/natural-compare/index.js"(exports, module) {
    var naturalCompare = function(a, b) {
      var i, codeA, codeB = 1, posA = 0, posB = 0, alphabet = String.alphabet;
      function getCode(str, pos, code) {
        if (code) {
          for (i = pos; code = getCode(str, i), code < 76 && code > 65; ) ++i;
          return +str.slice(pos - 1, i);
        }
        code = alphabet && alphabet.indexOf(str.charAt(pos));
        return code > -1 ? code + 76 : (code = str.charCodeAt(pos) || 0, code < 45 || code > 127) ? code : code < 46 ? 65 : code < 48 ? code - 1 : code < 58 ? code + 18 : code < 65 ? code - 11 : code < 91 ? code + 11 : code < 97 ? code - 37 : code < 123 ? code + 5 : code - 63;
      }
      if ((a += "") != (b += "")) for (; codeB; ) {
        codeA = getCode(a, posA++);
        codeB = getCode(b, posB++);
        if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {
          codeA = getCode(a, posA, posA);
          codeB = getCode(b, posB, posA = i);
          posB = i;
        }
        if (codeA != codeB) return codeA < codeB ? -1 : 1;
      }
      return 0;
    };
    try {
      module.exports = naturalCompare;
    } catch (e) {
      String.naturalCompare = naturalCompare;
    }
  }
});
export default require_index();
/*! Bundled license information:

natural-compare/index.js:
  (*
   * @version    1.4.0
   * @date       2015-10-26
   * @stability  3 - Stable
   * @author     Lauri Rooden (https://github.com/litejs/natural-compare-lite)
   * @license    MIT License
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL25hdHVyYWwtY29tcGFyZS9pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxuYXR1cmFsLWNvbXBhcmVcXFxcaW5kZXguanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcbmF0dXJhbC1jb21wYXJlXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9uYXR1cmFsLWNvbXBhcmUvaW5kZXguanNcIjtcblxuXG4vKlxuICogQHZlcnNpb24gICAgMS40LjBcbiAqIEBkYXRlICAgICAgIDIwMTUtMTAtMjZcbiAqIEBzdGFiaWxpdHkgIDMgLSBTdGFibGVcbiAqIEBhdXRob3IgICAgIExhdXJpIFJvb2RlbiAoaHR0cHM6Ly9naXRodWIuY29tL2xpdGVqcy9uYXR1cmFsLWNvbXBhcmUtbGl0ZSlcbiAqIEBsaWNlbnNlICAgIE1JVCBMaWNlbnNlXG4gKi9cblxuXG52YXIgbmF0dXJhbENvbXBhcmUgPSBmdW5jdGlvbihhLCBiKSB7XG5cdHZhciBpLCBjb2RlQVxuXHQsIGNvZGVCID0gMVxuXHQsIHBvc0EgPSAwXG5cdCwgcG9zQiA9IDBcblx0LCBhbHBoYWJldCA9IFN0cmluZy5hbHBoYWJldFxuXG5cdGZ1bmN0aW9uIGdldENvZGUoc3RyLCBwb3MsIGNvZGUpIHtcblx0XHRpZiAoY29kZSkge1xuXHRcdFx0Zm9yIChpID0gcG9zOyBjb2RlID0gZ2V0Q29kZShzdHIsIGkpLCBjb2RlIDwgNzYgJiYgY29kZSA+IDY1OykgKytpO1xuXHRcdFx0cmV0dXJuICtzdHIuc2xpY2UocG9zIC0gMSwgaSlcblx0XHR9XG5cdFx0Y29kZSA9IGFscGhhYmV0ICYmIGFscGhhYmV0LmluZGV4T2Yoc3RyLmNoYXJBdChwb3MpKVxuXHRcdHJldHVybiBjb2RlID4gLTEgPyBjb2RlICsgNzYgOiAoKGNvZGUgPSBzdHIuY2hhckNvZGVBdChwb3MpIHx8IDApLCBjb2RlIDwgNDUgfHwgY29kZSA+IDEyNykgPyBjb2RlXG5cdFx0XHQ6IGNvZGUgPCA0NiA/IDY1ICAgICAgICAgICAgICAgLy8gLVxuXHRcdFx0OiBjb2RlIDwgNDggPyBjb2RlIC0gMVxuXHRcdFx0OiBjb2RlIDwgNTggPyBjb2RlICsgMTggICAgICAgIC8vIDAtOVxuXHRcdFx0OiBjb2RlIDwgNjUgPyBjb2RlIC0gMTFcblx0XHRcdDogY29kZSA8IDkxID8gY29kZSArIDExICAgICAgICAvLyBBLVpcblx0XHRcdDogY29kZSA8IDk3ID8gY29kZSAtIDM3XG5cdFx0XHQ6IGNvZGUgPCAxMjMgPyBjb2RlICsgNSAgICAgICAgLy8gYS16XG5cdFx0XHQ6IGNvZGUgLSA2M1xuXHR9XG5cblxuXHRpZiAoKGErPVwiXCIpICE9IChiKz1cIlwiKSkgZm9yICg7Y29kZUI7KSB7XG5cdFx0Y29kZUEgPSBnZXRDb2RlKGEsIHBvc0ErKylcblx0XHRjb2RlQiA9IGdldENvZGUoYiwgcG9zQisrKVxuXG5cdFx0aWYgKGNvZGVBIDwgNzYgJiYgY29kZUIgPCA3NiAmJiBjb2RlQSA+IDY2ICYmIGNvZGVCID4gNjYpIHtcblx0XHRcdGNvZGVBID0gZ2V0Q29kZShhLCBwb3NBLCBwb3NBKVxuXHRcdFx0Y29kZUIgPSBnZXRDb2RlKGIsIHBvc0IsIHBvc0EgPSBpKVxuXHRcdFx0cG9zQiA9IGlcblx0XHR9XG5cblx0XHRpZiAoY29kZUEgIT0gY29kZUIpIHJldHVybiAoY29kZUEgPCBjb2RlQikgPyAtMSA6IDFcblx0fVxuXHRyZXR1cm4gMFxufVxuXG50cnkge1xuXHRtb2R1bGUuZXhwb3J0cyA9IG5hdHVyYWxDb21wYXJlO1xufSBjYXRjaCAoZSkge1xuXHRTdHJpbmcubmF0dXJhbENvbXBhcmUgPSBuYXR1cmFsQ29tcGFyZTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUFZQSxRQUFJLGlCQUFpQixTQUFTLEdBQUcsR0FBRztBQUNuQyxVQUFJLEdBQUcsT0FDTCxRQUFRLEdBQ1IsT0FBTyxHQUNQLE9BQU8sR0FDUCxXQUFXLE9BQU87QUFFcEIsZUFBUyxRQUFRLEtBQUssS0FBSyxNQUFNO0FBQ2hDLFlBQUksTUFBTTtBQUNULGVBQUssSUFBSSxLQUFLLE9BQU8sUUFBUSxLQUFLLENBQUMsR0FBRyxPQUFPLE1BQU0sT0FBTyxLQUFLLEdBQUU7QUFDakUsaUJBQU8sQ0FBQyxJQUFJLE1BQU0sTUFBTSxHQUFHLENBQUM7QUFBQSxRQUM3QjtBQUNBLGVBQU8sWUFBWSxTQUFTLFFBQVEsSUFBSSxPQUFPLEdBQUcsQ0FBQztBQUNuRCxlQUFPLE9BQU8sS0FBSyxPQUFPLE1BQU8sT0FBTyxJQUFJLFdBQVcsR0FBRyxLQUFLLEdBQUksT0FBTyxNQUFNLE9BQU8sT0FBTyxPQUMzRixPQUFPLEtBQUssS0FDWixPQUFPLEtBQUssT0FBTyxJQUNuQixPQUFPLEtBQUssT0FBTyxLQUNuQixPQUFPLEtBQUssT0FBTyxLQUNuQixPQUFPLEtBQUssT0FBTyxLQUNuQixPQUFPLEtBQUssT0FBTyxLQUNuQixPQUFPLE1BQU0sT0FBTyxJQUNwQixPQUFPO0FBQUEsTUFDWDtBQUdBLFdBQUssS0FBRyxRQUFRLEtBQUcsSUFBSyxRQUFNLFNBQVE7QUFDckMsZ0JBQVEsUUFBUSxHQUFHLE1BQU07QUFDekIsZ0JBQVEsUUFBUSxHQUFHLE1BQU07QUFFekIsWUFBSSxRQUFRLE1BQU0sUUFBUSxNQUFNLFFBQVEsTUFBTSxRQUFRLElBQUk7QUFDekQsa0JBQVEsUUFBUSxHQUFHLE1BQU0sSUFBSTtBQUM3QixrQkFBUSxRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUM7QUFDakMsaUJBQU87QUFBQSxRQUNSO0FBRUEsWUFBSSxTQUFTLE1BQU8sUUFBUSxRQUFRLFFBQVMsS0FBSztBQUFBLE1BQ25EO0FBQ0EsYUFBTztBQUFBLElBQ1I7QUFFQSxRQUFJO0FBQ0gsYUFBTyxVQUFVO0FBQUEsSUFDbEIsU0FBUyxHQUFHO0FBQ1gsYUFBTyxpQkFBaUI7QUFBQSxJQUN6QjtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
