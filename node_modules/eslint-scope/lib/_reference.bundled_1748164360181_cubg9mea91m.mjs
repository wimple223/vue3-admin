// node_modules/eslint-scope/lib/reference.js
var READ = 1;
var WRITE = 2;
var RW = READ | WRITE;
var Reference = class _Reference {
  constructor(ident, scope, flag, writeExpr, maybeImplicitGlobal, partial, init) {
    this.identifier = ident;
    this.from = scope;
    this.tainted = false;
    this.resolved = null;
    this.flag = flag;
    if (this.isWrite()) {
      this.writeExpr = writeExpr;
      this.partial = partial;
      this.init = init;
    }
    this.__maybeImplicitGlobal = maybeImplicitGlobal;
  }
  /**
   * Whether the reference is static.
   * @function Reference#isStatic
   * @returns {boolean} static
   */
  isStatic() {
    return !this.tainted && this.resolved && this.resolved.scope.isStatic();
  }
  /**
   * Whether the reference is writeable.
   * @function Reference#isWrite
   * @returns {boolean} write
   */
  isWrite() {
    return !!(this.flag & _Reference.WRITE);
  }
  /**
   * Whether the reference is readable.
   * @function Reference#isRead
   * @returns {boolean} read
   */
  isRead() {
    return !!(this.flag & _Reference.READ);
  }
  /**
   * Whether the reference is read-only.
   * @function Reference#isReadOnly
   * @returns {boolean} read only
   */
  isReadOnly() {
    return this.flag === _Reference.READ;
  }
  /**
   * Whether the reference is write-only.
   * @function Reference#isWriteOnly
   * @returns {boolean} write only
   */
  isWriteOnly() {
    return this.flag === _Reference.WRITE;
  }
  /**
   * Whether the reference is read-write.
   * @function Reference#isReadWrite
   * @returns {boolean} read write
   */
  isReadWrite() {
    return this.flag === _Reference.RW;
  }
};
Reference.READ = READ;
Reference.WRITE = WRITE;
Reference.RW = RW;
var reference_default = Reference;
export {
  reference_default as default
};
//# sourceMappingURL=data:application/json;base64,
