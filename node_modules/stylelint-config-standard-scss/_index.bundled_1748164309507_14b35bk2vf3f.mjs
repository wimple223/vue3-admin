var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/stylelint-config-standard-scss/index.js
var require_index = __commonJS({
  "node_modules/stylelint-config-standard-scss/index.js"(exports, module) {
    module.exports = {
      extends: ["stylelint-config-standard", "stylelint-config-recommended-scss"],
      rules: {
        "at-rule-empty-line-before": [
          "always",
          {
            except: ["blockless-after-blockless", "first-nested"],
            ignore: ["after-comment"],
            ignoreAtRules: ["else"]
          }
        ],
        "import-notation": "string",
        "length-zero-no-unit": [
          true,
          {
            ignore: ["custom-properties"],
            ignorePreludeOfAtRules: ["function", "mixin"]
          }
        ],
        "scss/at-else-closing-brace-newline-after": "always-last-in-chain",
        "scss/at-else-closing-brace-space-after": "always-intermediate",
        "scss/at-else-empty-line-before": "never",
        "scss/at-else-if-parentheses-space-before": "always",
        "scss/at-function-parentheses-space-before": "never",
        "scss/at-function-pattern": [
          "^(-?[a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message: "Expected function name to be kebab-case"
          }
        ],
        "scss/at-if-closing-brace-newline-after": "always-last-in-chain",
        "scss/at-if-closing-brace-space-after": "always-intermediate",
        "scss/at-mixin-argumentless-call-parentheses": "never",
        "scss/at-mixin-parentheses-space-before": "never",
        "scss/at-mixin-pattern": [
          "^(-?[a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message: "Expected mixin name to be kebab-case"
          }
        ],
        "scss/at-rule-conditional-no-parentheses": true,
        "scss/dollar-variable-colon-space-after": "always-single-line",
        "scss/dollar-variable-colon-space-before": "never",
        "scss/dollar-variable-empty-line-before": [
          "always",
          {
            except: ["after-dollar-variable", "first-nested"],
            ignore: ["after-comment", "inside-single-line-block"]
          }
        ],
        "scss/dollar-variable-pattern": [
          "^(-?[a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message: "Expected variable to be kebab-case"
          }
        ],
        "scss/double-slash-comment-empty-line-before": [
          "always",
          {
            except: ["first-nested"],
            ignore: ["between-comments", "stylelint-commands"]
          }
        ],
        "scss/double-slash-comment-whitespace-inside": "always",
        "scss/percent-placeholder-pattern": [
          "^(-?[a-z][a-z0-9]*)(-[a-z0-9]+)*$",
          {
            message: "Expected placeholder to be kebab-case"
          }
        ]
      }
    };
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3N0eWxlbGludC1jb25maWctc3RhbmRhcmQtc2Nzcy9pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxzdHlsZWxpbnQtY29uZmlnLXN0YW5kYXJkLXNjc3NcXFxcaW5kZXguanNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcc3R5bGVsaW50LWNvbmZpZy1zdGFuZGFyZC1zY3NzXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9zdHlsZWxpbnQtY29uZmlnLXN0YW5kYXJkLXNjc3MvaW5kZXguanNcIjsndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRleHRlbmRzOiBbJ3N0eWxlbGludC1jb25maWctc3RhbmRhcmQnLCAnc3R5bGVsaW50LWNvbmZpZy1yZWNvbW1lbmRlZC1zY3NzJ10sXG5cdHJ1bGVzOiB7XG5cdFx0J2F0LXJ1bGUtZW1wdHktbGluZS1iZWZvcmUnOiBbXG5cdFx0XHQnYWx3YXlzJyxcblx0XHRcdHtcblx0XHRcdFx0ZXhjZXB0OiBbJ2Jsb2NrbGVzcy1hZnRlci1ibG9ja2xlc3MnLCAnZmlyc3QtbmVzdGVkJ10sXG5cdFx0XHRcdGlnbm9yZTogWydhZnRlci1jb21tZW50J10sXG5cdFx0XHRcdGlnbm9yZUF0UnVsZXM6IFsnZWxzZSddLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdCdpbXBvcnQtbm90YXRpb24nOiAnc3RyaW5nJyxcblx0XHQnbGVuZ3RoLXplcm8tbm8tdW5pdCc6IFtcblx0XHRcdHRydWUsXG5cdFx0XHR7XG5cdFx0XHRcdGlnbm9yZTogWydjdXN0b20tcHJvcGVydGllcyddLFxuXHRcdFx0XHRpZ25vcmVQcmVsdWRlT2ZBdFJ1bGVzOiBbJ2Z1bmN0aW9uJywgJ21peGluJ10sXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0J3Njc3MvYXQtZWxzZS1jbG9zaW5nLWJyYWNlLW5ld2xpbmUtYWZ0ZXInOiAnYWx3YXlzLWxhc3QtaW4tY2hhaW4nLFxuXHRcdCdzY3NzL2F0LWVsc2UtY2xvc2luZy1icmFjZS1zcGFjZS1hZnRlcic6ICdhbHdheXMtaW50ZXJtZWRpYXRlJyxcblx0XHQnc2Nzcy9hdC1lbHNlLWVtcHR5LWxpbmUtYmVmb3JlJzogJ25ldmVyJyxcblx0XHQnc2Nzcy9hdC1lbHNlLWlmLXBhcmVudGhlc2VzLXNwYWNlLWJlZm9yZSc6ICdhbHdheXMnLFxuXHRcdCdzY3NzL2F0LWZ1bmN0aW9uLXBhcmVudGhlc2VzLXNwYWNlLWJlZm9yZSc6ICduZXZlcicsXG5cdFx0J3Njc3MvYXQtZnVuY3Rpb24tcGF0dGVybic6IFtcblx0XHRcdCdeKC0/W2Etel1bYS16MC05XSopKC1bYS16MC05XSspKiQnLFxuXHRcdFx0e1xuXHRcdFx0XHRtZXNzYWdlOiAnRXhwZWN0ZWQgZnVuY3Rpb24gbmFtZSB0byBiZSBrZWJhYi1jYXNlJyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHQnc2Nzcy9hdC1pZi1jbG9zaW5nLWJyYWNlLW5ld2xpbmUtYWZ0ZXInOiAnYWx3YXlzLWxhc3QtaW4tY2hhaW4nLFxuXHRcdCdzY3NzL2F0LWlmLWNsb3NpbmctYnJhY2Utc3BhY2UtYWZ0ZXInOiAnYWx3YXlzLWludGVybWVkaWF0ZScsXG5cdFx0J3Njc3MvYXQtbWl4aW4tYXJndW1lbnRsZXNzLWNhbGwtcGFyZW50aGVzZXMnOiAnbmV2ZXInLFxuXHRcdCdzY3NzL2F0LW1peGluLXBhcmVudGhlc2VzLXNwYWNlLWJlZm9yZSc6ICduZXZlcicsXG5cdFx0J3Njc3MvYXQtbWl4aW4tcGF0dGVybic6IFtcblx0XHRcdCdeKC0/W2Etel1bYS16MC05XSopKC1bYS16MC05XSspKiQnLFxuXHRcdFx0e1xuXHRcdFx0XHRtZXNzYWdlOiAnRXhwZWN0ZWQgbWl4aW4gbmFtZSB0byBiZSBrZWJhYi1jYXNlJyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHQnc2Nzcy9hdC1ydWxlLWNvbmRpdGlvbmFsLW5vLXBhcmVudGhlc2VzJzogdHJ1ZSxcblx0XHQnc2Nzcy9kb2xsYXItdmFyaWFibGUtY29sb24tc3BhY2UtYWZ0ZXInOiAnYWx3YXlzLXNpbmdsZS1saW5lJyxcblx0XHQnc2Nzcy9kb2xsYXItdmFyaWFibGUtY29sb24tc3BhY2UtYmVmb3JlJzogJ25ldmVyJyxcblx0XHQnc2Nzcy9kb2xsYXItdmFyaWFibGUtZW1wdHktbGluZS1iZWZvcmUnOiBbXG5cdFx0XHQnYWx3YXlzJyxcblx0XHRcdHtcblx0XHRcdFx0ZXhjZXB0OiBbJ2FmdGVyLWRvbGxhci12YXJpYWJsZScsICdmaXJzdC1uZXN0ZWQnXSxcblx0XHRcdFx0aWdub3JlOiBbJ2FmdGVyLWNvbW1lbnQnLCAnaW5zaWRlLXNpbmdsZS1saW5lLWJsb2NrJ10sXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0J3Njc3MvZG9sbGFyLXZhcmlhYmxlLXBhdHRlcm4nOiBbXG5cdFx0XHQnXigtP1thLXpdW2EtejAtOV0qKSgtW2EtejAtOV0rKSokJyxcblx0XHRcdHtcblx0XHRcdFx0bWVzc2FnZTogJ0V4cGVjdGVkIHZhcmlhYmxlIHRvIGJlIGtlYmFiLWNhc2UnLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdCdzY3NzL2RvdWJsZS1zbGFzaC1jb21tZW50LWVtcHR5LWxpbmUtYmVmb3JlJzogW1xuXHRcdFx0J2Fsd2F5cycsXG5cdFx0XHR7XG5cdFx0XHRcdGV4Y2VwdDogWydmaXJzdC1uZXN0ZWQnXSxcblx0XHRcdFx0aWdub3JlOiBbJ2JldHdlZW4tY29tbWVudHMnLCAnc3R5bGVsaW50LWNvbW1hbmRzJ10sXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0J3Njc3MvZG91YmxlLXNsYXNoLWNvbW1lbnQtd2hpdGVzcGFjZS1pbnNpZGUnOiAnYWx3YXlzJyxcblx0XHQnc2Nzcy9wZXJjZW50LXBsYWNlaG9sZGVyLXBhdHRlcm4nOiBbXG5cdFx0XHQnXigtP1thLXpdW2EtejAtOV0qKSgtW2EtejAtOV0rKSokJyxcblx0XHRcdHtcblx0XHRcdFx0bWVzc2FnZTogJ0V4cGVjdGVkIHBsYWNlaG9sZGVyIHRvIGJlIGtlYmFiLWNhc2UnLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUFFQSxXQUFPLFVBQVU7QUFBQSxNQUNoQixTQUFTLENBQUMsNkJBQTZCLG1DQUFtQztBQUFBLE1BQzFFLE9BQU87QUFBQSxRQUNOLDZCQUE2QjtBQUFBLFVBQzVCO0FBQUEsVUFDQTtBQUFBLFlBQ0MsUUFBUSxDQUFDLDZCQUE2QixjQUFjO0FBQUEsWUFDcEQsUUFBUSxDQUFDLGVBQWU7QUFBQSxZQUN4QixlQUFlLENBQUMsTUFBTTtBQUFBLFVBQ3ZCO0FBQUEsUUFDRDtBQUFBLFFBQ0EsbUJBQW1CO0FBQUEsUUFDbkIsdUJBQXVCO0FBQUEsVUFDdEI7QUFBQSxVQUNBO0FBQUEsWUFDQyxRQUFRLENBQUMsbUJBQW1CO0FBQUEsWUFDNUIsd0JBQXdCLENBQUMsWUFBWSxPQUFPO0FBQUEsVUFDN0M7QUFBQSxRQUNEO0FBQUEsUUFDQSw0Q0FBNEM7QUFBQSxRQUM1QywwQ0FBMEM7QUFBQSxRQUMxQyxrQ0FBa0M7QUFBQSxRQUNsQyw0Q0FBNEM7QUFBQSxRQUM1Qyw2Q0FBNkM7QUFBQSxRQUM3Qyw0QkFBNEI7QUFBQSxVQUMzQjtBQUFBLFVBQ0E7QUFBQSxZQUNDLFNBQVM7QUFBQSxVQUNWO0FBQUEsUUFDRDtBQUFBLFFBQ0EsMENBQTBDO0FBQUEsUUFDMUMsd0NBQXdDO0FBQUEsUUFDeEMsK0NBQStDO0FBQUEsUUFDL0MsMENBQTBDO0FBQUEsUUFDMUMseUJBQXlCO0FBQUEsVUFDeEI7QUFBQSxVQUNBO0FBQUEsWUFDQyxTQUFTO0FBQUEsVUFDVjtBQUFBLFFBQ0Q7QUFBQSxRQUNBLDJDQUEyQztBQUFBLFFBQzNDLDBDQUEwQztBQUFBLFFBQzFDLDJDQUEyQztBQUFBLFFBQzNDLDBDQUEwQztBQUFBLFVBQ3pDO0FBQUEsVUFDQTtBQUFBLFlBQ0MsUUFBUSxDQUFDLHlCQUF5QixjQUFjO0FBQUEsWUFDaEQsUUFBUSxDQUFDLGlCQUFpQiwwQkFBMEI7QUFBQSxVQUNyRDtBQUFBLFFBQ0Q7QUFBQSxRQUNBLGdDQUFnQztBQUFBLFVBQy9CO0FBQUEsVUFDQTtBQUFBLFlBQ0MsU0FBUztBQUFBLFVBQ1Y7QUFBQSxRQUNEO0FBQUEsUUFDQSwrQ0FBK0M7QUFBQSxVQUM5QztBQUFBLFVBQ0E7QUFBQSxZQUNDLFFBQVEsQ0FBQyxjQUFjO0FBQUEsWUFDdkIsUUFBUSxDQUFDLG9CQUFvQixvQkFBb0I7QUFBQSxVQUNsRDtBQUFBLFFBQ0Q7QUFBQSxRQUNBLCtDQUErQztBQUFBLFFBQy9DLG9DQUFvQztBQUFBLFVBQ25DO0FBQUEsVUFDQTtBQUFBLFlBQ0MsU0FBUztBQUFBLFVBQ1Y7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUFBLElBQ0Q7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
