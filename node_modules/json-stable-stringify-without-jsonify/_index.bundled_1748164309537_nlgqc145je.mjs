var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/json-stable-stringify-without-jsonify/index.js
var require_index = __commonJS({
  "node_modules/json-stable-stringify-without-jsonify/index.js"(exports, module) {
    module.exports = function(obj, opts) {
      if (!opts) opts = {};
      if (typeof opts === "function") opts = { cmp: opts };
      var space = opts.space || "";
      if (typeof space === "number") space = Array(space + 1).join(" ");
      var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
      var replacer = opts.replacer || function(key, value) {
        return value;
      };
      var cmp = opts.cmp && /* @__PURE__ */ function(f) {
        return function(node) {
          return function(a, b) {
            var aobj = { key: a, value: node[a] };
            var bobj = { key: b, value: node[b] };
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);
      var seen = [];
      return function stringify(parent, key, node, level) {
        var indent = space ? "\n" + new Array(level + 1).join(space) : "";
        var colonSeparator = space ? ": " : ":";
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        node = replacer.call(parent, key, node);
        if (node === void 0) {
          return;
        }
        if (typeof node !== "object" || node === null) {
          return JSON.stringify(node);
        }
        if (isArray(node)) {
          var out = [];
          for (var i = 0; i < node.length; i++) {
            var item = stringify(node, i, node[i], level + 1) || JSON.stringify(null);
            out.push(indent + space + item);
          }
          return "[" + out.join(",") + indent + "]";
        } else {
          if (seen.indexOf(node) !== -1) {
            if (cycles) return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
          } else seen.push(node);
          var keys = objectKeys(node).sort(cmp && cmp(node));
          var out = [];
          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node, key, node[key], level + 1);
            if (!value) continue;
            var keyValue = JSON.stringify(key) + colonSeparator + value;
            ;
            out.push(indent + space + keyValue);
          }
          seen.splice(seen.indexOf(node), 1);
          return "{" + out.join(",") + indent + "}";
        }
      }({ "": obj }, "", obj, 0);
    };
    var isArray = Array.isArray || function(x) {
      return {}.toString.call(x) === "[object Array]";
    };
    var objectKeys = Object.keys || function(obj) {
      var has = Object.prototype.hasOwnProperty || function() {
        return true;
      };
      var keys = [];
      for (var key in obj) {
        if (has.call(obj, key)) keys.push(key);
      }
      return keys;
    };
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2pzb24tc3RhYmxlLXN0cmluZ2lmeS13aXRob3V0LWpzb25pZnkvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcanNvbi1zdGFibGUtc3RyaW5naWZ5LXdpdGhvdXQtanNvbmlmeVxcXFxpbmRleC5qc1wiO2NvbnN0IF9faW5qZWN0ZWRfZGlybmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxqc29uLXN0YWJsZS1zdHJpbmdpZnktd2l0aG91dC1qc29uaWZ5XCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9qc29uLXN0YWJsZS1zdHJpbmdpZnktd2l0aG91dC1qc29uaWZ5L2luZGV4LmpzXCI7bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgaWYgKCFvcHRzKSBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBvcHRzID09PSAnZnVuY3Rpb24nKSBvcHRzID0geyBjbXA6IG9wdHMgfTtcbiAgICB2YXIgc3BhY2UgPSBvcHRzLnNwYWNlIHx8ICcnO1xuICAgIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdudW1iZXInKSBzcGFjZSA9IEFycmF5KHNwYWNlKzEpLmpvaW4oJyAnKTtcbiAgICB2YXIgY3ljbGVzID0gKHR5cGVvZiBvcHRzLmN5Y2xlcyA9PT0gJ2Jvb2xlYW4nKSA/IG9wdHMuY3ljbGVzIDogZmFsc2U7XG4gICAgdmFyIHJlcGxhY2VyID0gb3B0cy5yZXBsYWNlciB8fCBmdW5jdGlvbihrZXksIHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuICAgIHZhciBjbXAgPSBvcHRzLmNtcCAmJiAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW9iaiA9IHsga2V5OiBhLCB2YWx1ZTogbm9kZVthXSB9O1xuICAgICAgICAgICAgICAgIHZhciBib2JqID0geyBrZXk6IGIsIHZhbHVlOiBub2RlW2JdIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYW9iaiwgYm9iaik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pKG9wdHMuY21wKTtcblxuICAgIHZhciBzZWVuID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdHJpbmdpZnkgKHBhcmVudCwga2V5LCBub2RlLCBsZXZlbCkge1xuICAgICAgICB2YXIgaW5kZW50ID0gc3BhY2UgPyAoJ1xcbicgKyBuZXcgQXJyYXkobGV2ZWwgKyAxKS5qb2luKHNwYWNlKSkgOiAnJztcbiAgICAgICAgdmFyIGNvbG9uU2VwYXJhdG9yID0gc3BhY2UgPyAnOiAnIDogJzonO1xuXG4gICAgICAgIGlmIChub2RlICYmIG5vZGUudG9KU09OICYmIHR5cGVvZiBub2RlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbm9kZSA9IG5vZGUudG9KU09OKCk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gcmVwbGFjZXIuY2FsbChwYXJlbnQsIGtleSwgbm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcgfHwgbm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHN0cmluZ2lmeShub2RlLCBpLCBub2RlW2ldLCBsZXZlbCsxKSB8fCBKU09OLnN0cmluZ2lmeShudWxsKTtcbiAgICAgICAgICAgICAgICBvdXQucHVzaChpbmRlbnQgKyBzcGFjZSArIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdbJyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnXSc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChjeWNsZXMpIHJldHVybiBKU09OLnN0cmluZ2lmeSgnX19jeWNsZV9fJyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ29udmVydGluZyBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSlNPTicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBzZWVuLnB1c2gobm9kZSk7XG5cbiAgICAgICAgICAgIHZhciBrZXlzID0gb2JqZWN0S2V5cyhub2RlKS5zb3J0KGNtcCAmJiBjbXAobm9kZSkpO1xuICAgICAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gc3RyaW5naWZ5KG5vZGUsIGtleSwgbm9kZVtrZXldLCBsZXZlbCsxKTtcblxuICAgICAgICAgICAgICAgIGlmKCF2YWx1ZSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBKU09OLnN0cmluZ2lmeShrZXkpXG4gICAgICAgICAgICAgICAgICAgICsgY29sb25TZXBhcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgb3V0LnB1c2goaW5kZW50ICsgc3BhY2UgKyBrZXlWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWVuLnNwbGljZShzZWVuLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgcmV0dXJuICd7JyArIG91dC5qb2luKCcsJykgKyBpbmRlbnQgKyAnfSc7XG4gICAgICAgIH1cbiAgICB9KSh7ICcnOiBvYmogfSwgJycsIG9iaiwgMCk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4ge30udG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUFBcVYsV0FBTyxVQUFVLFNBQVUsS0FBSyxNQUFNO0FBQ3ZYLFVBQUksQ0FBQyxLQUFNLFFBQU8sQ0FBQztBQUNuQixVQUFJLE9BQU8sU0FBUyxXQUFZLFFBQU8sRUFBRSxLQUFLLEtBQUs7QUFDbkQsVUFBSSxRQUFRLEtBQUssU0FBUztBQUMxQixVQUFJLE9BQU8sVUFBVSxTQUFVLFNBQVEsTUFBTSxRQUFNLENBQUMsRUFBRSxLQUFLLEdBQUc7QUFDOUQsVUFBSSxT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
