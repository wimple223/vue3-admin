var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/postcss-selector-parser/postcss-selector-parser.d.ts
var require_postcss_selector_parser_d = __commonJS({
  "node_modules/postcss-selector-parser/postcss-selector-parser.d.ts"(exports, module) {
    module.exports = parser;
  }
});
export default require_postcss_selector_parser_d();
//# sourceMappingURL=data:application/json;base64,
