var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/lines-and-columns/build/index.js
var require_index = __commonJS({
  "node_modules/lines-and-columns/build/index.js"(exports) {
    exports.__esModule = true;
    exports.LinesAndColumns = void 0;
    var LF = "\n";
    var CR = "\r";
    var LinesAndColumns = (
      /** @class */
      function() {
        function LinesAndColumns2(string) {
          this.string = string;
          var offsets = [0];
          for (var offset = 0; offset < string.length; ) {
            switch (string[offset]) {
              case LF:
                offset += LF.length;
                offsets.push(offset);
                break;
              case CR:
                offset += CR.length;
                if (string[offset] === LF) {
                  offset += LF.length;
                }
                offsets.push(offset);
                break;
              default:
                offset++;
                break;
            }
          }
          this.offsets = offsets;
        }
        LinesAndColumns2.prototype.locationForIndex = function(index) {
          if (index < 0 || index > this.string.length) {
            return null;
          }
          var line = 0;
          var offsets = this.offsets;
          while (offsets[line + 1] <= index) {
            line++;
          }
          var column = index - offsets[line];
          return { line, column };
        };
        LinesAndColumns2.prototype.indexForLocation = function(location) {
          var line = location.line, column = location.column;
          if (line < 0 || line >= this.offsets.length) {
            return null;
          }
          if (column < 0 || column > this.lengthOfLine(line)) {
            return null;
          }
          return this.offsets[line] + column;
        };
        LinesAndColumns2.prototype.lengthOfLine = function(line) {
          var offset = this.offsets[line];
          var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
          return nextOffset - offset;
        };
        return LinesAndColumns2;
      }()
    );
    exports.LinesAndColumns = LinesAndColumns;
    exports["default"] = LinesAndColumns;
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2xpbmVzLWFuZC1jb2x1bW5zL2J1aWxkL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkU6XFxcXHFkXFxcXHZ1ZTMtYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXGxpbmVzLWFuZC1jb2x1bW5zXFxcXGJ1aWxkXFxcXGluZGV4LmpzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkU6XFxcXHFkXFxcXHZ1ZTMtYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXGxpbmVzLWFuZC1jb2x1bW5zXFxcXGJ1aWxkXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9saW5lcy1hbmQtY29sdW1ucy9idWlsZC9pbmRleC5qc1wiO1widXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuTGluZXNBbmRDb2x1bW5zID0gdm9pZCAwO1xudmFyIExGID0gJ1xcbic7XG52YXIgQ1IgPSAnXFxyJztcbnZhciBMaW5lc0FuZENvbHVtbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGluZXNBbmRDb2x1bW5zKHN0cmluZykge1xuICAgICAgICB0aGlzLnN0cmluZyA9IHN0cmluZztcbiAgICAgICAgdmFyIG9mZnNldHMgPSBbMF07XG4gICAgICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IHN0cmluZy5sZW5ndGg7KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZ1tvZmZzZXRdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBMRjpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IExGLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQ1I6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBDUi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdHJpbmdbb2Zmc2V0XSA9PT0gTEYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBMRi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9mZnNldHMgPSBvZmZzZXRzO1xuICAgIH1cbiAgICBMaW5lc0FuZENvbHVtbnMucHJvdG90eXBlLmxvY2F0aW9uRm9ySW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IHRoaXMuc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmUgPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0cyA9IHRoaXMub2Zmc2V0cztcbiAgICAgICAgd2hpbGUgKG9mZnNldHNbbGluZSArIDFdIDw9IGluZGV4KSB7XG4gICAgICAgICAgICBsaW5lKys7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbHVtbiA9IGluZGV4IC0gb2Zmc2V0c1tsaW5lXTtcbiAgICAgICAgcmV0dXJuIHsgbGluZTogbGluZSwgY29sdW1uOiBjb2x1bW4gfTtcbiAgICB9O1xuICAgIExpbmVzQW5kQ29sdW1ucy5wcm90b3R5cGUuaW5kZXhGb3JMb2NhdGlvbiA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmUsIGNvbHVtbiA9IGxvY2F0aW9uLmNvbHVtbjtcbiAgICAgICAgaWYgKGxpbmUgPCAwIHx8IGxpbmUgPj0gdGhpcy5vZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbiA8IDAgfHwgY29sdW1uID4gdGhpcy5sZW5ndGhPZkxpbmUobGluZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldHNbbGluZV0gKyBjb2x1bW47XG4gICAgfTtcbiAgICBMaW5lc0FuZENvbHVtbnMucHJvdG90eXBlLmxlbmd0aE9mTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldHNbbGluZV07XG4gICAgICAgIHZhciBuZXh0T2Zmc2V0ID0gbGluZSA9PT0gdGhpcy5vZmZzZXRzLmxlbmd0aCAtIDFcbiAgICAgICAgICAgID8gdGhpcy5zdHJpbmcubGVuZ3RoXG4gICAgICAgICAgICA6IHRoaXMub2Zmc2V0c1tsaW5lICsgMV07XG4gICAgICAgIHJldHVybiBuZXh0T2Zmc2V0IC0gb2Zmc2V0O1xuICAgIH07XG4gICAgcmV0dXJuIExpbmVzQW5kQ29sdW1ucztcbn0oKSk7XG5leHBvcnRzLkxpbmVzQW5kQ29sdW1ucyA9IExpbmVzQW5kQ29sdW1ucztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gTGluZXNBbmRDb2x1bW5zO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7O0FBQUE7QUFBQTtBQUNBLFlBQVEsYUFBYTtBQUNyQixZQUFRLGtCQUFrQjtBQUMxQixRQUFJLEtBQUs7QUFDVCxRQUFJLEtBQUs7QUFDVCxRQUFJO0FBQUE7QUFBQSxNQUFpQyxXQUFZO0FBQzdDLGlCQUFTQSxpQkFBZ0IsUUFBUTtBQUM3QixlQUFLLFNBQVM7QUFDZCxjQUFJLFVBQVUsQ0FBQyxDQUFDO0FBQ2hCLG1CQUFTLFNBQVMsR0FBRyxTQUFTLE9BQU8sVUFBUztBQUMxQyxvQkFBUSxPQUFPLE1BQU0sR0FBRztBQUFBLGNBQ3BCLEtBQUs7QUFDRCwwQkFBVSxHQUFHO0FBQ2Isd0JBQVEsS0FBSyxNQUFNO0FBQ25CO0FBQUEsY0FDSixLQUFLO0FBQ0QsMEJBQVUsR0FBRztBQUNiLG9CQUFJLE9BQU8sTUFBTSxNQUFNLElBQUk7QUFDdkIsNEJBQVUsR0FBRztBQUFBLGdCQUNqQjtBQUNBLHdCQUFRLEtBQUssTUFBTTtBQUNuQjtBQUFBLGNBQ0o7QUFDSTtBQUNBO0FBQUEsWUFDUjtBQUFBLFVBQ0o7QUFDQSxlQUFLLFVBQVU7QUFBQSxRQUNuQjtBQUNBLFFBQUFBLGlCQUFnQixVQUFVLG1CQUFtQixTQUFVLE9BQU87QUFDMUQsY0FBSSxRQUFRLEtBQUssUUFBUSxLQUFLLE9BQU8sUUFBUTtBQUN6QyxtQkFBTztBQUFBLFVBQ1g7QUFDQSxjQUFJLE9BQU87QUFDWCxjQUFJLFVBQVUsS0FBSztBQUNuQixpQkFBTyxRQUFRLE9BQU8sQ0FBQyxLQUFLLE9BQU87QUFDL0I7QUFBQSxVQUNKO0FBQ0EsY0FBSSxTQUFTLFFBQVEsUUFBUSxJQUFJO0FBQ2pDLGlCQUFPLEVBQUUsTUFBWSxPQUFlO0FBQUEsUUFDeEM7QUFDQSxRQUFBQSxpQkFBZ0IsVUFBVSxtQkFBbUIsU0FBVSxVQUFVO0FBQzdELGNBQUksT0FBTyxTQUFTLE1BQU0sU0FBUyxTQUFTO0FBQzVDLGNBQUksT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLFFBQVE7QUFDekMsbUJBQU87QUFBQSxVQUNYO0FBQ0EsY0FBSSxTQUFTLEtBQUssU0FBUyxLQUFLLGFBQWEsSUFBSSxHQUFHO0FBQ2hELG1CQUFPO0FBQUEsVUFDWDtBQUNBLGlCQUFPLEtBQUssUUFBUSxJQUFJLElBQUk7QUFBQSxRQUNoQztBQUNBLFFBQUFBLGlCQUFnQixVQUFVLGVBQWUsU0FBVSxNQUFNO0FBQ3JELGNBQUksU0FBUyxLQUFLLFFBQVEsSUFBSTtBQUM5QixjQUFJLGFBQWEsU0FBUyxLQUFLLFFBQVEsU0FBUyxJQUMxQyxLQUFLLE9BQU8sU0FDWixLQUFLLFFBQVEsT0FBTyxDQUFDO0FBQzNCLGlCQUFPLGFBQWE7QUFBQSxRQUN4QjtBQUNBLGVBQU9BO0FBQUEsTUFDWCxFQUFFO0FBQUE7QUFDRixZQUFRLGtCQUFrQjtBQUMxQixZQUFRLFNBQVMsSUFBSTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbIkxpbmVzQW5kQ29sdW1ucyJdCn0K
