var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/postcss/lib/rule.d.ts
var require_rule_d = __commonJS({
  "node_modules/postcss/lib/rule.d.ts"(exports, module) {
    module.exports = Rule;
  }
});
export default require_rule_d();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3J1bGUuZC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxwb3N0Y3NzXFxcXGxpYlxcXFxydWxlLmQudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxccG9zdGNzc1xcXFxsaWJcIjtjb25zdCBfX2luamVjdGVkX2ltcG9ydF9tZXRhX3VybF9fID0gXCJmaWxlOi8vL0U6L3FkL3Z1ZTMtYWRtaW4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3J1bGUuZC50c1wiO2ltcG9ydCBDb250YWluZXIsIHtcbiAgQ29udGFpbmVyUHJvcHMsXG4gIENvbnRhaW5lcldpdGhDaGlsZHJlblxufSBmcm9tICcuL2NvbnRhaW5lci5qcydcblxuZGVjbGFyZSBuYW1lc3BhY2UgUnVsZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUnVsZVJhd3MgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XG4gICAgLyoqXG4gICAgICogVGhlIHNwYWNlIHN5bWJvbHMgYWZ0ZXIgdGhlIGxhc3QgY2hpbGQgb2YgdGhlIG5vZGUgdG8gdGhlIGVuZCBvZiB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBhZnRlcj86IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwYWNlIHN5bWJvbHMgYmVmb3JlIHRoZSBub2RlLiBJdCBhbHNvIHN0b3JlcyBgKmBcbiAgICAgKiBhbmQgYF9gIHN5bWJvbHMgYmVmb3JlIHRoZSBkZWNsYXJhdGlvbiAoSUUgaGFjaykuXG4gICAgICovXG4gICAgYmVmb3JlPzogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3ltYm9scyBiZXR3ZWVuIHRoZSBzZWxlY3RvciBhbmQgYHtgIGZvciBydWxlcy5cbiAgICAgKi9cbiAgICBiZXR3ZWVuPzogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyB0aGUgdGV4dCBvZiB0aGUgc2VtaWNvbG9uIGFmdGVyIHRoaXMgcnVsZS5cbiAgICAgKi9cbiAgICBvd25TZW1pY29sb24/OiBzdHJpbmdcblxuICAgIC8qKlxuICAgICAqIFRoZSBydWxlXHUyMDE5cyBzZWxlY3RvciB3aXRoIGNvbW1lbnRzLlxuICAgICAqL1xuICAgIHNlbGVjdG9yPzoge1xuICAgICAgcmF3OiBzdHJpbmdcbiAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyBgdHJ1ZWAgaWYgdGhlIGxhc3QgY2hpbGQgaGFzIGFuIChvcHRpb25hbCkgc2VtaWNvbG9uLlxuICAgICAqL1xuICAgIHNlbWljb2xvbj86IGJvb2xlYW5cbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFJ1bGVQcm9wcyA9IHtcbiAgICAvKiogSW5mb3JtYXRpb24gdXNlZCB0byBnZW5lcmF0ZSBieXRlLXRvLWJ5dGUgZXF1YWwgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuICovXG4gICAgcmF3cz86IFJ1bGVSYXdzXG4gIH0gJiAoXG4gICAgICB8IHtcbiAgICAgICAgICAvKiogU2VsZWN0b3Igb3Igc2VsZWN0b3JzIG9mIHRoZSBydWxlLiAqL1xuICAgICAgICAgIHNlbGVjdG9yOiBzdHJpbmdcbiAgICAgICAgICBzZWxlY3RvcnM/OiBuZXZlclxuICAgICAgICB9XG4gICAgICB8IHtcbiAgICAgICAgICBzZWxlY3Rvcj86IG5ldmVyXG4gICAgICAgICAgLyoqIFNlbGVjdG9ycyBvZiB0aGUgcnVsZSByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBzdHJpbmdzLiAqL1xuICAgICAgICAgIHNlbGVjdG9yczogcmVhZG9ubHkgc3RyaW5nW11cbiAgICAgICAgfVxuICAgICkgJiBDb250YWluZXJQcm9wc1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgZXhwb3J0IHsgUnVsZV8gYXMgZGVmYXVsdCB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIENTUyBydWxlOiBhIHNlbGVjdG9yIGZvbGxvd2VkIGJ5IGEgZGVjbGFyYXRpb24gYmxvY2suXG4gKlxuICogYGBganNcbiAqIE9uY2UgKHJvb3QsIHsgUnVsZSB9KSB7XG4gKiAgIGxldCBhID0gbmV3IFJ1bGUoeyBzZWxlY3RvcjogJ2EnIH0pXG4gKiAgIGEuYXBwZW5kKFx1MjAyNilcbiAqICAgcm9vdC5hcHBlbmQoYSlcbiAqIH1cbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYXt9JylcbiAqIGNvbnN0IHJ1bGUgPSByb290LmZpcnN0XG4gKiBydWxlLnR5cGUgICAgICAgLy89PiAncnVsZSdcbiAqIHJ1bGUudG9TdHJpbmcoKSAvLz0+ICdhe30nXG4gKiBgYGBcbiAqL1xuZGVjbGFyZSBjbGFzcyBSdWxlXyBleHRlbmRzIENvbnRhaW5lciB7XG4gIG5vZGVzOiBOb25OdWxsYWJsZTxDb250YWluZXJbJ25vZGVzJ10+XG4gIHBhcmVudDogQ29udGFpbmVyV2l0aENoaWxkcmVuIHwgdW5kZWZpbmVkXG4gIHJhd3M6IFJ1bGUuUnVsZVJhd3NcbiAgdHlwZTogJ3J1bGUnXG4gIC8qKlxuICAgKiBUaGUgcnVsZVx1MjAxOXMgZnVsbCBzZWxlY3RvciByZXByZXNlbnRlZCBhcyBhIHN0cmluZy5cbiAgICpcbiAgICogYGBganNcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EsIGIgeyB9JylcbiAgICogY29uc3QgcnVsZSA9IHJvb3QuZmlyc3RcbiAgICogcnVsZS5zZWxlY3RvciAvLz0+ICdhLCBiJ1xuICAgKiBgYGBcbiAgICovXG4gIGdldCBzZWxlY3RvcigpOiBzdHJpbmdcblxuICBzZXQgc2VsZWN0b3IodmFsdWU6IHN0cmluZylcbiAgLyoqXG4gICAqIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHJ1bGVcdTIwMTlzIGluZGl2aWR1YWwgc2VsZWN0b3JzLlxuICAgKiBHcm91cHMgb2Ygc2VsZWN0b3JzIGFyZSBzcGxpdCBhdCBjb21tYXMuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhLCBiIHsgfScpXG4gICAqIGNvbnN0IHJ1bGUgPSByb290LmZpcnN0XG4gICAqXG4gICAqIHJ1bGUuc2VsZWN0b3IgIC8vPT4gJ2EsIGInXG4gICAqIHJ1bGUuc2VsZWN0b3JzIC8vPT4gWydhJywgJ2InXVxuICAgKlxuICAgKiBydWxlLnNlbGVjdG9ycyA9IFsnYScsICdzdHJvbmcnXVxuICAgKiBydWxlLnNlbGVjdG9yIC8vPT4gJ2EsIHN0cm9uZydcbiAgICogYGBgXG4gICAqL1xuICBnZXQgc2VsZWN0b3JzKCk6IHN0cmluZ1tdXG5cbiAgc2V0IHNlbGVjdG9ycyh2YWx1ZXM6IHN0cmluZ1tdKVxuXG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRzPzogUnVsZS5SdWxlUHJvcHMpXG4gIGFzc2lnbihvdmVycmlkZXM6IG9iamVjdCB8IFJ1bGUuUnVsZVByb3BzKTogdGhpc1xuICBjbG9uZShvdmVycmlkZXM/OiBQYXJ0aWFsPFJ1bGUuUnVsZVByb3BzPik6IHRoaXNcbiAgY2xvbmVBZnRlcihvdmVycmlkZXM/OiBQYXJ0aWFsPFJ1bGUuUnVsZVByb3BzPik6IHRoaXNcbiAgY2xvbmVCZWZvcmUob3ZlcnJpZGVzPzogUGFydGlhbDxSdWxlLlJ1bGVQcm9wcz4pOiB0aGlzXG59XG5cbmRlY2xhcmUgY2xhc3MgUnVsZSBleHRlbmRzIFJ1bGVfIHt9XG5cbmV4cG9ydCA9IFJ1bGVcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUE2SEEscUJBQVM7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
