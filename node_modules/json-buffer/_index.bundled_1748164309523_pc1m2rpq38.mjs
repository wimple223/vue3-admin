var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/json-buffer/index.js
var require_index = __commonJS({
  "node_modules/json-buffer/index.js"(exports) {
    exports.stringify = function stringify(o) {
      if ("undefined" == typeof o) return o;
      if (o && Buffer.isBuffer(o))
        return JSON.stringify(":base64:" + o.toString("base64"));
      if (o && o.toJSON)
        o = o.toJSON();
      if (o && "object" === typeof o) {
        var s = "";
        var array = Array.isArray(o);
        s = array ? "[" : "{";
        var first = true;
        for (var k in o) {
          var ignore = "function" == typeof o[k] || !array && "undefined" === typeof o[k];
          if (Object.hasOwnProperty.call(o, k) && !ignore) {
            if (!first)
              s += ",";
            first = false;
            if (array) {
              if (o[k] == void 0)
                s += "null";
              else
                s += stringify(o[k]);
            } else if (o[k] !== void 0) {
              s += stringify(k) + ":" + stringify(o[k]);
            }
          }
        }
        s += array ? "]" : "}";
        return s;
      } else if ("string" === typeof o) {
        return JSON.stringify(/^:/.test(o) ? ":" + o : o);
      } else if ("undefined" === typeof o) {
        return "null";
      } else
        return JSON.stringify(o);
    };
    exports.parse = function(s) {
      return JSON.parse(s, function(key, value) {
        if ("string" === typeof value) {
          if (/^:base64:/.test(value))
            return Buffer.from(value.substring(8), "base64");
          else
            return /^:/.test(value) ? value.substring(1) : value;
        }
        return value;
      });
    };
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2pzb24tYnVmZmVyL2luZGV4LmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIkU6XFxcXHFkXFxcXHZ1ZTMtYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXGpzb24tYnVmZmVyXFxcXGluZGV4LmpzXCI7Y29uc3QgX19pbmplY3RlZF9kaXJuYW1lX18gPSBcIkU6XFxcXHFkXFxcXHZ1ZTMtYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXGpzb24tYnVmZmVyXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9qc29uLWJ1ZmZlci9pbmRleC5qc1wiOy8vVE9ETzogaGFuZGxlIHJldml2ZXIvZGVoeWRyYXRlIGZ1bmN0aW9uIGxpa2Ugbm9ybWFsXG4vL2FuZCBoYW5kbGUgaW5kZW50YXRpb24sIGxpa2Ugbm9ybWFsLlxuLy9pZiBhbnlvbmUgbmVlZHMgdGhpcy4uLiBwbGVhc2Ugc2VuZCBwdWxsIHJlcXVlc3QuXG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5IChvKSB7XG4gIGlmKCd1bmRlZmluZWQnID09IHR5cGVvZiBvKSByZXR1cm4gb1xuXG4gIGlmKG8gJiYgQnVmZmVyLmlzQnVmZmVyKG8pKVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSgnOmJhc2U2NDonICsgby50b1N0cmluZygnYmFzZTY0JykpXG5cbiAgaWYobyAmJiBvLnRvSlNPTilcbiAgICBvID0gIG8udG9KU09OKClcblxuICBpZihvICYmICdvYmplY3QnID09PSB0eXBlb2Ygbykge1xuICAgIHZhciBzID0gJydcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KG8pXG4gICAgcyA9IGFycmF5ID8gJ1snIDogJ3snXG4gICAgdmFyIGZpcnN0ID0gdHJ1ZVxuXG4gICAgZm9yKHZhciBrIGluIG8pIHtcbiAgICAgIHZhciBpZ25vcmUgPSAnZnVuY3Rpb24nID09IHR5cGVvZiBvW2tdIHx8ICghYXJyYXkgJiYgJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBvW2tdKVxuICAgICAgaWYoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobywgaykgJiYgIWlnbm9yZSkge1xuICAgICAgICBpZighZmlyc3QpXG4gICAgICAgICAgcyArPSAnLCdcbiAgICAgICAgZmlyc3QgPSBmYWxzZVxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBpZihvW2tdID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHMgKz0gJ251bGwnXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcyArPSBzdHJpbmdpZnkob1trXSlcbiAgICAgICAgfSBlbHNlIGlmIChvW2tdICE9PSB2b2lkKDApKSB7XG4gICAgICAgICAgcyArPSBzdHJpbmdpZnkoaykgKyAnOicgKyBzdHJpbmdpZnkob1trXSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHMgKz0gYXJyYXkgPyAnXScgOiAnfSdcblxuICAgIHJldHVybiBzXG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBvKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KC9eOi8udGVzdChvKSA/ICc6JyArIG8gOiBvKVxuICB9IGVsc2UgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2Ygbykge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH0gZWxzZVxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvKVxufVxuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24gKHMpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UocywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZignc3RyaW5nJyA9PT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICBpZigvXjpiYXNlNjQ6Ly50ZXN0KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLnN1YnN0cmluZyg4KSwgJ2Jhc2U2NCcpXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAvXjovLnRlc3QodmFsdWUpID8gdmFsdWUuc3Vic3RyaW5nKDEpIDogdmFsdWUgXG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9KVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7O0FBQUE7QUFBQTtBQUlBLFlBQVEsWUFBWSxTQUFTLFVBQVcsR0FBRztBQUN6QyxVQUFHLGVBQWUsT0FBTyxFQUFHLFFBQU87QUFFbkMsVUFBRyxLQUFLLE9BQU8sU0FBUyxDQUFDO0FBQ3ZCLGVBQU8sS0FBSyxVQUFVLGFBQWEsRUFBRSxTQUFTLFFBQVEsQ0FBQztBQUV6RCxVQUFHLEtBQUssRUFBRTtBQUNSLFlBQUssRUFBRSxPQUFPO0FBRWhCLFVBQUcsS0FBSyxhQUFhLE9BQU8sR0FBRztBQUM3QixZQUFJLElBQUk7QUFDUixZQUFJLFFBQVEsTUFBTSxRQUFRLENBQUM7QUFDM0IsWUFBSSxRQUFRLE1BQU07QUFDbEIsWUFBSSxRQUFRO0FBRVosaUJBQVEsS0FBSyxHQUFHO0FBQ2QsY0FBSSxTQUFTLGNBQWMsT0FBTyxFQUFFLENBQUMsS0FBTSxDQUFDLFNBQVMsZ0JBQWdCLE9BQU8sRUFBRSxDQUFDO0FBQy9FLGNBQUcsT0FBTyxlQUFlLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRO0FBQzlDLGdCQUFHLENBQUM7QUFDRixtQkFBSztBQUNQLG9CQUFRO0FBQ1IsZ0JBQUksT0FBTztBQUNULGtCQUFHLEVBQUUsQ0FBQyxLQUFLO0FBQ1QscUJBQUs7QUFBQTtBQUVMLHFCQUFLLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFBQSxZQUN2QixXQUFXLEVBQUUsQ0FBQyxNQUFNLFFBQVM7QUFDM0IsbUJBQUssVUFBVSxDQUFDLElBQUksTUFBTSxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQUEsWUFDMUM7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUVBLGFBQUssUUFBUSxNQUFNO0FBRW5CLGVBQU87QUFBQSxNQUNULFdBQVcsYUFBYSxPQUFPLEdBQUc7QUFDaEMsZUFBTyxLQUFLLFVBQVUsS0FBSyxLQUFLLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQztBQUFBLE1BQ2xELFdBQVcsZ0JBQWdCLE9BQU8sR0FBRztBQUNuQyxlQUFPO0FBQUEsTUFDVDtBQUNFLGVBQU8sS0FBSyxVQUFVLENBQUM7QUFBQSxJQUMzQjtBQUVBLFlBQVEsUUFBUSxTQUFVLEdBQUc7QUFDM0IsYUFBTyxLQUFLLE1BQU0sR0FBRyxTQUFVLEtBQUssT0FBTztBQUN6QyxZQUFHLGFBQWEsT0FBTyxPQUFPO0FBQzVCLGNBQUcsWUFBWSxLQUFLLEtBQUs7QUFDdkIsbUJBQU8sT0FBTyxLQUFLLE1BQU0sVUFBVSxDQUFDLEdBQUcsUUFBUTtBQUFBO0FBRS9DLG1CQUFPLEtBQUssS0FBSyxLQUFLLElBQUksTUFBTSxVQUFVLENBQUMsSUFBSTtBQUFBLFFBQ25EO0FBQ0EsZUFBTztBQUFBLE1BQ1QsQ0FBQztBQUFBLElBQ0g7QUFBQTtBQUFBOyIsCiAgIm5hbWVzIjogW10KfQo=
