var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/postcss-resolve-nested-selector/index.js
var require_index = __commonJS({
  "node_modules/postcss-resolve-nested-selector/index.js"(exports, module) {
    module.exports = function resolveNestedSelector(selector, node) {
      var parent = node.parent;
      var parentIsNestAtRule = parent.type === "atrule" && parent.name === "nest";
      if (parent.type === "root") return [selector];
      if (parent.type !== "rule" && !parentIsNestAtRule) return resolveNestedSelector(selector, parent);
      var parentSelectors = parentIsNestAtRule ? split(parent.params, ",", false).map((x) => x.trim()) : parent.selectors;
      var resolvedSelectors = parentSelectors.reduce(function(result, parentSelector) {
        if (selector.indexOf("&") !== -1) {
          var newlyResolvedSelectors = resolveNestedSelector(parentSelector, parent).map(function(resolvedParentSelector) {
            return split(selector, "&", true).join(resolvedParentSelector);
          });
          return result.concat(newlyResolvedSelectors);
        }
        var combinedSelector = [parentSelector, selector].join(" ");
        return result.concat(resolveNestedSelector(combinedSelector, parent));
      }, []);
      return resolvedSelectors;
    };
    var blockPairs = {
      "(": ")",
      "[": "]",
      "{": "}"
    };
    function split(string, separator, splitFunctions) {
      var array = [];
      var current = "";
      var split2 = false;
      var blockClose = [];
      var inQuote = false;
      var prevQuote = "";
      var escape = false;
      for (var letter of string) {
        if (escape) {
          escape = false;
        } else if (letter === "\\") {
          escape = true;
        } else if (inQuote) {
          if (letter === prevQuote) {
            inQuote = false;
          }
        } else if (letter === '"' || letter === "'") {
          inQuote = true;
          prevQuote = letter;
        } else if (letter === "(" || letter === "[" || letter === "{") {
          blockClose.push(blockPairs[letter]);
        } else if (letter === blockClose[blockClose.length - 1]) {
          blockClose.pop();
        } else if (blockClose.length === 0 || splitFunctions && blockClose.every((x) => x === ")")) {
          if (letter === separator) split2 = true;
        }
        if (split2) {
          array.push(current);
          current = "";
          split2 = false;
        } else {
          current += letter;
        }
      }
      array.push(current);
      return array;
    }
  }
});
export default require_index();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3Bvc3Rjc3MtcmVzb2x2ZS1uZXN0ZWQtc2VsZWN0b3IvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxccG9zdGNzcy1yZXNvbHZlLW5lc3RlZC1zZWxlY3RvclxcXFxpbmRleC5qc1wiO2NvbnN0IF9faW5qZWN0ZWRfZGlybmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxwb3N0Y3NzLXJlc29sdmUtbmVzdGVkLXNlbGVjdG9yXCI7Y29uc3QgX19pbmplY3RlZF9pbXBvcnRfbWV0YV91cmxfXyA9IFwiZmlsZTovLy9FOi9xZC92dWUzLWFkbWluL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXJlc29sdmUtbmVzdGVkLXNlbGVjdG9yL2luZGV4LmpzXCI7bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXNvbHZlTmVzdGVkU2VsZWN0b3Ioc2VsZWN0b3IsIG5vZGUpIHtcblx0dmFyIHBhcmVudCA9IG5vZGUucGFyZW50O1xuXHR2YXIgcGFyZW50SXNOZXN0QXRSdWxlID0gcGFyZW50LnR5cGUgPT09ICdhdHJ1bGUnICYmIHBhcmVudC5uYW1lID09PSAnbmVzdCc7XG5cblx0aWYgKHBhcmVudC50eXBlID09PSAncm9vdCcpIHJldHVybiBbc2VsZWN0b3JdO1xuXHRpZiAocGFyZW50LnR5cGUgIT09ICdydWxlJyAmJiAhcGFyZW50SXNOZXN0QXRSdWxlKSByZXR1cm4gcmVzb2x2ZU5lc3RlZFNlbGVjdG9yKHNlbGVjdG9yLCBwYXJlbnQpO1xuXG5cdHZhciBwYXJlbnRTZWxlY3RvcnMgPSAocGFyZW50SXNOZXN0QXRSdWxlKVxuXHRcdD8gc3BsaXQocGFyZW50LnBhcmFtcywgJywnLCBmYWxzZSkubWFwKCh4KSA9PiB4LnRyaW0oKSlcblx0XHQ6IHBhcmVudC5zZWxlY3RvcnM7XG5cblx0dmFyIHJlc29sdmVkU2VsZWN0b3JzID0gcGFyZW50U2VsZWN0b3JzLnJlZHVjZShmdW5jdGlvbihyZXN1bHQsIHBhcmVudFNlbGVjdG9yKSB7XG5cdFx0aWYgKHNlbGVjdG9yLmluZGV4T2YoJyYnKSAhPT0gLTEpIHtcblx0XHRcdHZhciBuZXdseVJlc29sdmVkU2VsZWN0b3JzID0gcmVzb2x2ZU5lc3RlZFNlbGVjdG9yKHBhcmVudFNlbGVjdG9yLCBwYXJlbnQpLm1hcChmdW5jdGlvbihyZXNvbHZlZFBhcmVudFNlbGVjdG9yKSB7XG5cdFx0XHRcdHJldHVybiBzcGxpdChzZWxlY3RvciwgJyYnLCB0cnVlKS5qb2luKHJlc29sdmVkUGFyZW50U2VsZWN0b3IpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0LmNvbmNhdChuZXdseVJlc29sdmVkU2VsZWN0b3JzKTtcblx0XHR9XG5cblx0XHR2YXIgY29tYmluZWRTZWxlY3RvciA9IFsgcGFyZW50U2VsZWN0b3IsIHNlbGVjdG9yIF0uam9pbignICcpO1xuXHRcdHJldHVybiByZXN1bHQuY29uY2F0KHJlc29sdmVOZXN0ZWRTZWxlY3Rvcihjb21iaW5lZFNlbGVjdG9yLCBwYXJlbnQpKTtcblx0fSwgW10pO1xuXG5cdHJldHVybiByZXNvbHZlZFNlbGVjdG9ycztcbn1cblxudmFyIGJsb2NrUGFpcnMgPSB7XG5cdCcoJzogJyknLFxuXHQnWyc6ICddJyxcblx0J3snOiAnfSdcbn07XG5cbmZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBzcGxpdEZ1bmN0aW9ucykge1xuXHR2YXIgYXJyYXkgPSBbXTtcblx0dmFyIGN1cnJlbnQgPSAnJztcblx0dmFyIHNwbGl0ID0gZmFsc2U7XG5cblx0dmFyIGJsb2NrQ2xvc2UgPSBbXTtcblx0dmFyIGluUXVvdGUgPSBmYWxzZTtcblx0dmFyIHByZXZRdW90ZSA9ICcnO1xuXHR2YXIgZXNjYXBlID0gZmFsc2U7XG5cblx0Zm9yICh2YXIgbGV0dGVyIG9mIHN0cmluZykge1xuXHRcdGlmIChlc2NhcGUpIHtcblx0XHRcdGVzY2FwZSA9IGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAobGV0dGVyID09PSAnXFxcXCcpIHtcblx0XHRcdGVzY2FwZSA9IHRydWU7XG5cdFx0fSBlbHNlIGlmIChpblF1b3RlKSB7XG5cdFx0XHRpZiAobGV0dGVyID09PSBwcmV2UXVvdGUpIHtcblx0XHRcdFx0aW5RdW90ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobGV0dGVyID09PSAnXCInIHx8IGxldHRlciA9PT0gXCInXCIpIHtcblx0XHRcdGluUXVvdGUgPSB0cnVlO1xuXHRcdFx0cHJldlF1b3RlID0gbGV0dGVyO1xuXHRcdH0gZWxzZSBpZiAobGV0dGVyID09PSAnKCcgfHwgbGV0dGVyID09PSAnWycgfHwgbGV0dGVyID09PSAneycpIHtcblx0XHRcdGJsb2NrQ2xvc2UucHVzaChibG9ja1BhaXJzW2xldHRlcl0pO1xuXHRcdH0gZWxzZSBpZiAobGV0dGVyID09PSBibG9ja0Nsb3NlW2Jsb2NrQ2xvc2UubGVuZ3RoIC0gMV0pIHtcblx0XHRcdGJsb2NrQ2xvc2UucG9wKCk7XG5cdFx0fSBlbHNlIGlmIChibG9ja0Nsb3NlLmxlbmd0aCA9PT0gMCB8fCAoc3BsaXRGdW5jdGlvbnMgJiYgYmxvY2tDbG9zZS5ldmVyeSgoeCkgPT4geCA9PT0gJyknKSkpIHtcblx0XHRcdGlmIChsZXR0ZXIgPT09IHNlcGFyYXRvcikgc3BsaXQgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmIChzcGxpdCkge1xuXHRcdFx0YXJyYXkucHVzaChjdXJyZW50KTtcblx0XHRcdGN1cnJlbnQgPSAnJztcblx0XHRcdHNwbGl0ID0gZmFsc2U7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnQgKz0gbGV0dGVyO1xuXHRcdH1cblx0fVxuXG5cdGFycmF5LnB1c2goY3VycmVudCk7XG5cdHJldHVybiBhcnJheTtcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FB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
