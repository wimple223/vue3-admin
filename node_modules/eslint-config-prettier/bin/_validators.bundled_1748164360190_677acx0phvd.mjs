var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/eslint-config-prettier/bin/validators.js
var require_validators = __commonJS({
  "node_modules/eslint-config-prettier/bin/validators.js"(exports, module) {
    module.exports = {
      "curly"({ options }) {
        if (options.length === 0) {
          return true;
        }
        const firstOption = options[0];
        return firstOption !== "multi-line" && firstOption !== "multi-or-nest";
      },
      "lines-around-comment"({ options }) {
        if (options.length === 0) {
          return false;
        }
        const firstOption = options[0];
        return Boolean(
          firstOption && firstOption.allowBlockStart && firstOption.allowBlockEnd && firstOption.allowObjectStart && firstOption.allowObjectEnd && firstOption.allowArrayStart && firstOption.allowArrayEnd
        );
      },
      "no-confusing-arrow"({ options }) {
        if (options.length === 0) {
          return false;
        }
        const firstOption = options[0];
        return firstOption ? firstOption.allowParens === false : false;
      },
      "no-tabs"({ options }) {
        if (options.length === 0) {
          return false;
        }
        const firstOption = options[0];
        return Boolean(firstOption && firstOption.allowIndentationTabs);
      },
      "unicorn/template-indent"({ options }) {
        if (options.length === 0) {
          return false;
        }
        const { comments = [], tags = [] } = options[0] || {};
        return Array.isArray(comments) && Array.isArray(tags) && !(comments.includes("GraphQL") || comments.includes("HTML") || tags.includes("css") || tags.includes("graphql") || tags.includes("gql") || tags.includes("html") || tags.includes("markdown") || tags.includes("md"));
      },
      "vue/html-self-closing"({ options }) {
        if (options.length === 0) {
          return false;
        }
        const firstOption = options[0];
        return Boolean(
          firstOption && firstOption.html && firstOption.html.void === "any"
          // Enable when Prettier supports SVG: https://github.com/prettier/prettier/issues/5322
          // && firstOption.svg === "any"
        );
      }
    };
  }
});
export default require_validators();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2VzbGludC1jb25maWctcHJldHRpZXIvYmluL3ZhbGlkYXRvcnMuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9faW5qZWN0ZWRfZmlsZW5hbWVfXyA9IFwiRTpcXFxccWRcXFxcdnVlMy1hZG1pblxcXFxub2RlX21vZHVsZXNcXFxcZXNsaW50LWNvbmZpZy1wcmV0dGllclxcXFxiaW5cXFxcdmFsaWRhdG9ycy5qc1wiO2NvbnN0IF9faW5qZWN0ZWRfZGlybmFtZV9fID0gXCJFOlxcXFxxZFxcXFx2dWUzLWFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFxlc2xpbnQtY29uZmlnLXByZXR0aWVyXFxcXGJpblwiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vRTovcWQvdnVlMy1hZG1pbi9ub2RlX21vZHVsZXMvZXNsaW50LWNvbmZpZy1wcmV0dGllci9iaW4vdmFsaWRhdG9ycy5qc1wiO1widXNlIHN0cmljdFwiO1xuXG4vLyBUaGVzZSB2YWxpZGF0b3IgZnVuY3Rpb25zIGFuc3dlciB0aGUgcXVlc3Rpb24gXHUyMDFDSXMgdGhlIGNvbmZpZyB2YWxpZD9cdTIwMUQgXHUyMDEzIHJldHVyblxuLy8gYGZhbHNlYCBpZiB0aGUgb3B0aW9ucyBETyBjb25mbGljdCB3aXRoIFByZXR0aWVyLCBhbmQgYHRydWVgIGlmIHRoZXkgZG9uXHUyMDE5dC5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiY3VybHlcIih7IG9wdGlvbnMgfSkge1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RPcHRpb24gPSBvcHRpb25zWzBdO1xuICAgIHJldHVybiBmaXJzdE9wdGlvbiAhPT0gXCJtdWx0aS1saW5lXCIgJiYgZmlyc3RPcHRpb24gIT09IFwibXVsdGktb3ItbmVzdFwiO1xuICB9LFxuXG4gIFwibGluZXMtYXJvdW5kLWNvbW1lbnRcIih7IG9wdGlvbnMgfSkge1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGZpcnN0T3B0aW9uID0gb3B0aW9uc1swXTtcbiAgICByZXR1cm4gQm9vbGVhbihcbiAgICAgIGZpcnN0T3B0aW9uICYmXG4gICAgICAgIGZpcnN0T3B0aW9uLmFsbG93QmxvY2tTdGFydCAmJlxuICAgICAgICBmaXJzdE9wdGlvbi5hbGxvd0Jsb2NrRW5kICYmXG4gICAgICAgIGZpcnN0T3B0aW9uLmFsbG93T2JqZWN0U3RhcnQgJiZcbiAgICAgICAgZmlyc3RPcHRpb24uYWxsb3dPYmplY3RFbmQgJiZcbiAgICAgICAgZmlyc3RPcHRpb24uYWxsb3dBcnJheVN0YXJ0ICYmXG4gICAgICAgIGZpcnN0T3B0aW9uLmFsbG93QXJyYXlFbmRcbiAgICApO1xuICB9LFxuXG4gIFwibm8tY29uZnVzaW5nLWFycm93XCIoeyBvcHRpb25zIH0pIHtcbiAgICBpZiAob3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdE9wdGlvbiA9IG9wdGlvbnNbMF07XG4gICAgcmV0dXJuIGZpcnN0T3B0aW9uID8gZmlyc3RPcHRpb24uYWxsb3dQYXJlbnMgPT09IGZhbHNlIDogZmFsc2U7XG4gIH0sXG5cbiAgXCJuby10YWJzXCIoeyBvcHRpb25zIH0pIHtcbiAgICBpZiAob3B0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdE9wdGlvbiA9IG9wdGlvbnNbMF07XG4gICAgcmV0dXJuIEJvb2xlYW4oZmlyc3RPcHRpb24gJiYgZmlyc3RPcHRpb24uYWxsb3dJbmRlbnRhdGlvblRhYnMpO1xuICB9LFxuXG4gIFwidW5pY29ybi90ZW1wbGF0ZS1pbmRlbnRcIih7IG9wdGlvbnMgfSkge1xuICAgIGlmIChvcHRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY29tbWVudHMgPSBbXSwgdGFncyA9IFtdIH0gPSBvcHRpb25zWzBdIHx8IHt9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoY29tbWVudHMpICYmXG4gICAgICBBcnJheS5pc0FycmF5KHRhZ3MpICYmXG4gICAgICAhKFxuICAgICAgICBjb21tZW50cy5pbmNsdWRlcyhcIkdyYXBoUUxcIikgfHxcbiAgICAgICAgY29tbWVudHMuaW5jbHVkZXMoXCJIVE1MXCIpIHx8XG4gICAgICAgIHRhZ3MuaW5jbHVkZXMoXCJjc3NcIikgfHxcbiAgICAgICAgdGFncy5pbmNsdWRlcyhcImdyYXBocWxcIikgfHxcbiAgICAgICAgdGFncy5pbmNsdWRlcyhcImdxbFwiKSB8fFxuICAgICAgICB0YWdzLmluY2x1ZGVzKFwiaHRtbFwiKSB8fFxuICAgICAgICB0YWdzLmluY2x1ZGVzKFwibWFya2Rvd25cIikgfHxcbiAgICAgICAgdGFncy5pbmNsdWRlcyhcIm1kXCIpXG4gICAgICApXG4gICAgKTtcbiAgfSxcblxuICBcInZ1ZS9odG1sLXNlbGYtY2xvc2luZ1wiKHsgb3B0aW9ucyB9KSB7XG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RPcHRpb24gPSBvcHRpb25zWzBdO1xuICAgIHJldHVybiBCb29sZWFuKFxuICAgICAgZmlyc3RPcHRpb24gJiYgZmlyc3RPcHRpb24uaHRtbCAmJiBmaXJzdE9wdGlvbi5odG1sLnZvaWQgPT09IFwiYW55XCJcbiAgICAgIC8vIEVuYWJsZSB3aGVuIFByZXR0aWVyIHN1cHBvcnRzIFNWRzogaHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVyL2lzc3Vlcy81MzIyXG4gICAgICAvLyAmJiBmaXJzdE9wdGlvbi5zdmcgPT09IFwiYW55XCJcbiAgICApO1xuICB9LFxufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUFBO0FBQUE7QUFLQSxXQUFPLFVBQVU7QUFBQSxNQUNmLFFBQVEsRUFBRSxRQUFRLEdBQUc7QUFDbkIsWUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixpQkFBTztBQUFBLFFBQ1Q7QUFFQSxjQUFNLGNBQWMsUUFBUSxDQUFDO0FBQzdCLGVBQU8sZ0JBQWdCLGdCQUFnQixnQkFBZ0I7QUFBQSxNQUN6RDtBQUFBLE1BRUEsdUJBQXVCLEVBQUUsUUFBUSxHQUFHO0FBQ2xDLFlBQUksUUFBUSxXQUFXLEdBQUc7QUFDeEIsaUJBQU87QUFBQSxRQUNUO0FBRUEsY0FBTSxjQUFjLFFBQVEsQ0FBQztBQUM3QixlQUFPO0FBQUEsVUFDTCxlQUNFLFlBQVksbUJBQ1osWUFBWSxpQkFDWixZQUFZLG9CQUNaLFlBQVksa0JBQ1osWUFBWSxtQkFDWixZQUFZO0FBQUEsUUFDaEI7QUFBQSxNQUNGO0FBQUEsTUFFQSxxQkFBcUIsRUFBRSxRQUFRLEdBQUc7QUFDaEMsWUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixpQkFBTztBQUFBLFFBQ1Q7QUFFQSxjQUFNLGNBQWMsUUFBUSxDQUFDO0FBQzdCLGVBQU8sY0FBYyxZQUFZLGdCQUFnQixRQUFRO0FBQUEsTUFDM0Q7QUFBQSxNQUVBLFVBQVUsRUFBRSxRQUFRLEdBQUc7QUFDckIsWUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixpQkFBTztBQUFBLFFBQ1Q7QUFFQSxjQUFNLGNBQWMsUUFBUSxDQUFDO0FBQzdCLGVBQU8sUUFBUSxlQUFlLFlBQVksb0JBQW9CO0FBQUEsTUFDaEU7QUFBQSxNQUVBLDBCQUEwQixFQUFFLFFBQVEsR0FBRztBQUNyQyxZQUFJLFFBQVEsV0FBVyxHQUFHO0FBQ3hCLGlCQUFPO0FBQUEsUUFDVDtBQUVBLGNBQU0sRUFBRSxXQUFXLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFFcEQsZUFDRSxNQUFNLFFBQVEsUUFBUSxLQUN0QixNQUFNLFFBQVEsSUFBSSxLQUNsQixFQUNFLFNBQVMsU0FBUyxTQUFTLEtBQzNCLFNBQVMsU0FBUyxNQUFNLEtBQ3hCLEtBQUssU0FBUyxLQUFLLEtBQ25CLEtBQUssU0FBUyxTQUFTLEtBQ3ZCLEtBQUssU0FBUyxLQUFLLEtBQ25CLEtBQUssU0FBUyxNQUFNLEtBQ3BCLEtBQUssU0FBUyxVQUFVLEtBQ3hCLEtBQUssU0FBUyxJQUFJO0FBQUEsTUFHeEI7QUFBQSxNQUVBLHdCQUF3QixFQUFFLFFBQVEsR0FBRztBQUNuQyxZQUFJLFFBQVEsV0FBVyxHQUFHO0FBQ3hCLGlCQUFPO0FBQUEsUUFDVDtBQUVBLGNBQU0sY0FBYyxRQUFRLENBQUM7QUFDN0IsZUFBTztBQUFBLFVBQ0wsZUFBZSxZQUFZLFFBQVEsWUFBWSxLQUFLLFNBQVM7QUFBQTtBQUFBO0FBQUEsUUFHL0Q7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
